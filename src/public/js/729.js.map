{"version":3,"sources":["webpack:///./resources/js/Modules/Simulations/Components/SimulationHeatmapEditor.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/SimulationHeatmap.tsx"],"names":["simulation","canEditPages","selectedPathways","selectedNodes","typeAheadRefTag","useRef","useState","isLoadingTags","setIsLoadingTags","tagInputValue","setTagInputValue","tagInputOptions","setTagInputOptions","selectedNodesVector","Object","values","flatMap","a","pluginCode","setPluginCode","plugin","type","mode","sortBy","n","absolute","limit","attach","tags","simulations","title","height","state","setState","selection","selectionDisabled","length","selectionText","doAddTag","prevState","filter","t","current","clear","handleDeleteTag","tag","e","preventDefault","useEffect","JSON","stringify","undefined","xs","xl","className","for","id","value","onChange","target","disabled","checked","htmlFor","style","width","map","key","href","onClick","filterBy","isLoading","options","onSearch","query","response","data","selected","onKeyDown","re","code","minLength","placeholder","ref","addonType","CopyToClipboard","text","delay","trigger","maxHeight","overflowX","error","message","sort_by","then","colorscale","layout","font","size","autosize","config","responsive","useResizeHandler","color"],"mappings":"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","file":"js/729.js?id=cd006192797db4889df9","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n    Badge,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport SimulationHeatmap from \"../WikiPlugins/SimulationHeatmap\";\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\n\ninterface Props {\n    simulation: number;\n    canEditPages: boolean;\n    selectedPathways: string[];\n    selectedNodes: Record<string, string[]>;\n}\n\ntype Limit = \"none\" | \"positive\" | \"negative\";\n\ninterface State {\n    plugin: \"@Simulations:SimulationHeatmap\";\n    simulation: number;\n    type: \"pathways\" | \"nodes\";\n    mode: \"top\" | \"selected\";\n    sortBy: \"perturbation\" | \"activity\";\n    n: number;\n    absolute: boolean;\n    limit: Limit;\n    attach: {\n        tags: string[];\n        mode: \"all\" | \"any\";\n        simulations: string[];\n    };\n    title: string;\n    height: number;\n}\n\nconst SimulationHeatmapEditor: React.FC<Props> = ({\n    simulation,\n    canEditPages,\n    selectedPathways,\n    selectedNodes,\n}: Props) => {\n    const typeAheadRefTag = useRef<AsyncTypeahead<string>>(null);\n    const [isLoadingTags, setIsLoadingTags] = useState(false);\n    const [tagInputValue, setTagInputValue] = useState<string[]>([]);\n    const [tagInputOptions, setTagInputOptions] = useState<string[]>([]);\n    const selectedNodesVector = Object.values(selectedNodes).flatMap((a) => a);\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:SimulationHeatmap\",\n        simulation: simulation,\n        type: \"pathways\",\n        mode: \"top\",\n        sortBy: \"perturbation\",\n        n: 10,\n        absolute: false,\n        limit: \"none\",\n        attach: {\n            tags: [],\n            mode: \"all\",\n            simulations: [],\n        },\n        title: \"\",\n        height: 600,\n    });\n    const selection =\n        state.type === \"pathways\" ? selectedPathways : selectedNodesVector;\n    const selectionDisabled = selection.length === 0;\n    const selectionText = selectionDisabled\n        ? ` (Select at least one ${\n              state.type === \"pathways\" ? \"pathway\" : \"node\"\n          } to enable)`\n        : \"\";\n\n    const doAddTag = () => {\n        if (tagInputValue && tagInputValue.length > 0) {\n            const newTag = tagInputValue[0];\n            if (newTag) {\n                setState((prevState) => ({\n                    ...prevState,\n                    attach: {\n                        ...prevState.attach,\n                        tags: [\n                            ...prevState.attach.tags.filter(\n                                (t) => t !== newTag\n                            ),\n                            newTag,\n                        ],\n                    },\n                }));\n                // @ts-ignore\n                typeAheadRefTag.current?.clear();\n            }\n        }\n    };\n    const handleSearchTag = async (query: string) => {\n        setIsLoadingTags(true);\n        try {\n            const response = await axios.post(route(\"tag.typeahead\"), {\n                query,\n            });\n            setTagInputOptions(response.data as string[]);\n        } catch (_) {\n            setTagInputOptions([]);\n        }\n        setIsLoadingTags(false);\n    };\n    const handleDeleteTag =\n        (tag: string) => (e: React.MouseEvent<HTMLAnchorElement>) => {\n            e.preventDefault();\n            setState((prevState) => ({\n                ...prevState,\n                attach: {\n                    ...prevState.attach,\n                    tags: [...prevState.attach.tags.filter((t) => t !== tag)],\n                },\n            }));\n        };\n\n    useEffect(() => {\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(\n    {\n        ...state,\n        selection: state.mode === \"selected\" ? selection : undefined,\n    },\n    undefined,\n    2\n)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state, selection]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl=\"8\">\n                    <SimulationHeatmap\n                        {...state}\n                        selection={\n                            state.mode === \"selected\" ? selection : undefined\n                        }\n                    />\n                </Col>\n                <Col xs=\"12\" xl=\"4\" className=\"d-flex flex-column\">\n                    <Card className=\"bg-gradient-dark shadow mb-2 flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Change your heatmap\n                            </h6>\n                        </CardHeader>\n                        <CardBody className=\"text-white-50\">\n                            <FormGroup>\n                                <Label for=\"input-title\">Title</Label>\n                                <Input\n                                    id=\"input-title\"\n                                    type=\"text\"\n                                    value={state.title}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            title: e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-height\">Height</Label>\n                                <Input\n                                    id=\"input-height\"\n                                    type=\"number\"\n                                    value={state.height}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            height: +e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-type\">Type</Label>\n                                <Input\n                                    id=\"input-type\"\n                                    type=\"select\"\n                                    value={state.type}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            type:\n                                                e.target.value === \"pathways\"\n                                                    ? \"pathways\"\n                                                    : \"nodes\",\n                                        }))\n                                    }\n                                >\n                                    <option value=\"pathways\">Pathways</option>\n                                    <option value=\"nodes\">Nodes</option>\n                                </Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-sortBy\">Sort by</Label>\n                                <Input\n                                    id=\"input-sortBy\"\n                                    type=\"select\"\n                                    value={state.sortBy}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            sortBy:\n                                                e.target.value ===\n                                                \"perturbation\"\n                                                    ? \"perturbation\"\n                                                    : \"activity\",\n                                        }))\n                                    }\n                                >\n                                    <option value=\"perturbation\">\n                                        Perturbation\n                                    </option>\n                                    <option value=\"activity\">Activity</option>\n                                </Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-mode\">Mode</Label>\n                                <Input\n                                    id=\"input-mode\"\n                                    type=\"select\"\n                                    value={state.mode}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            mode:\n                                                e.target.value === \"top\"\n                                                    ? \"top\"\n                                                    : \"selected\",\n                                        }))\n                                    }\n                                >\n                                    <option value=\"top\">Top-N</option>\n                                    <option\n                                        value=\"selected\"\n                                        disabled={selectionDisabled}\n                                    >\n                                        {`Selected${selectionText}`}\n                                    </option>\n                                </Input>\n                            </FormGroup>\n                            {state.mode === \"top\" && (\n                                <>\n                                    <FormGroup>\n                                        <Label for=\"input-number\">\n                                            Number of top {state.type}\n                                        </Label>\n                                        <Input\n                                            id=\"input-number\"\n                                            type=\"number\"\n                                            value={state.n}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    n: +e.target.value,\n                                                }))\n                                            }\n                                        />\n                                    </FormGroup>\n                                    <div className=\"custom-control custom-checkbox mb-3\">\n                                        <input\n                                            className=\"custom-control-input\"\n                                            id=\"check-absolute\"\n                                            checked={state.absolute}\n                                            type=\"checkbox\"\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    absolute: e.target.checked,\n                                                }))\n                                            }\n                                        />\n                                        <label\n                                            className=\"custom-control-label\"\n                                            htmlFor=\"check-absolute\"\n                                        >\n                                            Sort by absolute value?\n                                        </label>\n                                    </div>\n                                    <FormGroup>\n                                        <Label for=\"input-limit\">\n                                            Limit selection\n                                        </Label>\n                                        <Input\n                                            id=\"input-limit\"\n                                            type=\"select\"\n                                            value={state.limit}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    limit: e.target\n                                                        .value as Limit,\n                                                }))\n                                            }\n                                        >\n                                            <option value=\"none\">None</option>\n                                            <option value=\"positive\">\n                                                Positive values\n                                            </option>\n                                            <option value=\"negative\">\n                                                Negative values\n                                            </option>\n                                        </Input>\n                                    </FormGroup>\n                                </>\n                            )}\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs=\"12\" xl={canEditPages ? \"8\" : \"12\"}>\n                    <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Add columns\n                            </h6>\n                        </CardHeader>\n                        <CardBody>\n                            <div className=\"d-flex flex-row justify-content-start align-items-center text-sm text-white-50 flex-wrap\">\n                                <div>\n                                    Add a column for each simulation having\n                                </div>\n                                <Input\n                                    type=\"select\"\n                                    value={state.attach?.mode ?? \"all\"}\n                                    className=\"form-control-sm mx-2\"\n                                    style={{ width: \"auto\" }}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            attach: {\n                                                ...state.attach,\n                                                mode:\n                                                    e.target.value === \"all\"\n                                                        ? \"all\"\n                                                        : \"any\",\n                                            },\n                                        }))\n                                    }\n                                >\n                                    <option value=\"all\">all</option>\n                                    <option value=\"any\">any</option>\n                                </Input>\n                                <div>tags:</div>\n                            </div>\n                            <Row>\n                                <Col\n                                    style={{ height: \"100px\" }}\n                                    className=\"overflow-auto\"\n                                >\n                                    {state.attach?.tags?.map((tag) => (\n                                        <Badge\n                                            key={tag}\n                                            className=\"badge-default mx-1 text-light\"\n                                            href=\"#\"\n                                            onClick={handleDeleteTag(tag)}\n                                            title=\"Click to delete\"\n                                        >\n                                            {tag}\n                                        </Badge>\n                                    ))}\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-2\">\n                                <Col>\n                                    <InputGroup>\n                                        <AsyncTypeahead<string>\n                                            filterBy={() => true}\n                                            id=\"tags-add-tag-input\"\n                                            isLoading={isLoadingTags}\n                                            options={tagInputOptions}\n                                            onSearch={handleSearchTag}\n                                            onChange={(selected: string[]) =>\n                                                setTagInputValue(selected)\n                                            }\n                                            onKeyDown={(e) => {\n                                                const re =\n                                                    e as unknown as React.KeyboardEvent<HTMLInputElement>;\n                                                if (\n                                                    re.code === \"Enter\" ||\n                                                    re.code === \"NumpadEnter\"\n                                                ) {\n                                                    doAddTag();\n                                                }\n                                            }}\n                                            selected={tagInputValue}\n                                            minLength={3}\n                                            className=\"text-dark\"\n                                            placeholder=\"Add new tag (category: tag)\"\n                                            ref={typeAheadRefTag}\n                                        />\n                                        <InputGroupAddon addonType=\"append\">\n                                            <InputGroupText>\n                                                <a\n                                                    className=\"text-primary\"\n                                                    href=\"#\"\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        doAddTag();\n                                                    }}\n                                                >\n                                                    <i className=\"fas fa-plus\" />\n                                                </a>\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                    </InputGroup>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Col>\n                {canEditPages && (\n                    <Col xs=\"12\" xl=\"4\">\n                        <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                )}\n            </Row>\n        </>\n    );\n};\n\nexport default SimulationHeatmapEditor;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport { Alert } from \"reactstrap\";\nimport Plot from \"react-plotly.js\";\n\ninterface Props {\n    simulation: number;\n    type?: \"pathways\" | \"nodes\";\n    mode?: \"top\" | \"selected\";\n    selection?: string[];\n    sortBy?: \"perturbation\" | \"activity\";\n    n?: number;\n    absolute?: boolean;\n    limit?: \"none\" | \"positive\" | \"negative\";\n    attach?: {\n        tags?: string[];\n        mode?: \"all\" | \"any\";\n        simulations?: string[];\n    };\n    title?: string;\n    height?: number;\n}\n\ninterface Data {\n    x: string[];\n    y: string[];\n    z: number[][];\n}\n\ninterface State {\n    data?: Data;\n    error?: boolean;\n    message?: string;\n}\n\nconst SimulationHeatmap: React.FC<Props> = ({\n    simulation,\n    title,\n    height = 600,\n    type = \"pathways\",\n    mode = \"top\",\n    selection,\n    sortBy = \"perturbation\",\n    n = 10,\n    absolute = false,\n    limit = \"none\",\n    attach = {},\n}: Props) => {\n    const [state, setState] = useState<State>({});\n\n    const { data, error, message } = state;\n\n    useEffect(() => {\n        axios\n            .post<Data>(route(\"simulations.plugins.heatmap\", simulation), {\n                type,\n                mode,\n                selection,\n                sort_by: sortBy,\n                n,\n                absolute,\n                limit,\n                attach,\n            })\n            .then(({ data }) => {\n                setState({ data });\n            })\n            .catch((e) => {\n                setState({\n                    error: true,\n                    message: e.response.data.message ?? e.message,\n                });\n            });\n    }, [simulation, type, mode, selection, sortBy, n, absolute, limit, attach]);\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    return (\n        <>\n            {!!data && (\n                <>\n                    <div className=\"d-flex flex-grow-1\">\n                        <Plot\n                            data={[\n                                {\n                                    ...data,\n                                    type: \"heatmap\",\n                                    colorscale: [\n                                        [0, \"rgb(5,10,172)\"],\n                                        [0.35, \"rgb(106,137,247)\"],\n                                        [0.5, \"rgb(255,255,255)\"],\n                                        [0.6, \"rgb(220,170,132)\"],\n                                        [0.7, \"rgb(230,145,90)\"],\n                                        [1, \"rgb(178,10,28)\"],\n                                    ],\n                                },\n                            ]}\n                            layout={{\n                                font: { size: 12 },\n                                autosize: true,\n                                title,\n                            }}\n                            config={{\n                                responsive: true,\n                            }}\n                            style={{\n                                width: \"100%\",\n                                height: `${height}px`,\n                            }}\n                            useResizeHandler\n                        />\n                    </div>\n                </>\n            )}\n            {!data && (\n                <Alert color=\"primary\">\n                    <i className=\"fas fa-circle-notch fa-spin mx-2\" />\n                    Building image. Please wait...\n                </Alert>\n            )}\n        </>\n    );\n};\n\nexport default SimulationHeatmap;\n"],"sourceRoot":""}