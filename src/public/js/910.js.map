{"version":3,"sources":["webpack:///./resources/js/Components/Layout/Headers/DefaultHeader.tsx","webpack:///./resources/js/Hooks/useDispatcherEvent.ts","webpack:///./resources/js/Modules/Simulations/Components/CorrelationGraphEditor.tsx","webpack:///./resources/js/Modules/Simulations/Components/NodesTableEditor.tsx","webpack:///./resources/js/Common/utils.ts","webpack:///./resources/js/Modules/Simulations/Components/PartialCorrelationGraphEditor.tsx","webpack:///./resources/js/Modules/Simulations/Components/PathwayImageEditor.tsx","webpack:///./resources/js/Modules/Simulations/Components/PathwaysTableEditor.tsx","webpack:///./resources/js/Modules/Simulations/Components/SimulationHeatmapEditor.tsx","webpack:///./resources/js/Modules/Simulations/Pages/Simulations/Show.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/CorrelationGraph.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/NodesTable.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/PartialCorrelationGraph.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/PathwayImage.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/PathwaysTable.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/SimulationHeatmap.tsx"],"names":["headerBg","title","className","fluid","lg","md","useDispatcherEventWithSender","eventName","callback","connectTo","deps","dispatcher","useEffect","on","off","useDispatcherEvent","data","sender","includes","simulation","canEditPages","onIdChange","typeAheadRefTag","useRef","useState","isLoadingTags","setIsLoadingTags","tagInputValue","setTagInputValue","tagInputOptions","setTagInputOptions","pluginCode","setPluginCode","plugin","id","Math","random","toString","substr","fn","top","n","direction","useEndpoints","usePerturbation","findByTags","searchMode","height","state","setState","doAddTag","length","prevState","filter","t","current","clear","handleDeleteTag","tag","e","preventDefault","JSON","stringify","undefined","xs","xl","for","type","value","onChange","target","checked","htmlFor","style","width","map","key","href","onClick","filterBy","isLoading","options","onSearch","query","response","selected","onKeyDown","re","code","minLength","placeholder","ref","addonType","CopyToClipboard","text","delay","trigger","maxHeight","overflowX","pathway","onSelect","useNodesSelection","setUseNodesSelection","nodesSelection","setNodesSelection","nodes","sortable","filterable","defaultSorting","dataField","order","internalOnSelect","node","v","realState","enableId","disabled","filterByKey","raw","Object","keys","k","reduce","obj","correlationGraphId","connected","setConnected","selection","tmpState","Row","Col","PartialCorrelationGraph","connectedTo","Card","CardHeader","CardBody","FormGroup","Label","Input","Button","UncontrolledTooltip","pathwaysToNames","legend","position","onView","usePathwaysSelection","setUsePathwaysSelection","pathwaysSelection","setPathwaysSelection","pathways","selectedPathways","selectedNodes","selectedNodesVector","values","flatMap","a","mode","sortBy","absolute","limit","attach","tags","simulations","selectionDisabled","selectionText","selectedNav","setSelectedNav","currentPathway","setCurrentPathway","setSelectedPathways","setSelectedNodes","setCorrelationGraphId","changeSelectedNav","onSelectPathway","onSelectNode","prevSelection","get","name","pills","role","active","error","message","then","marker","color","y","cmin","cmax","colorscale","showscale","layout","bargap","yaxis","range","font","size","autosize","showlegend","config","responsive","useResizeHandler","event","points","customdata","dispatch","compareWith","SearchBar","filters","columns","sort","classes","formatter","_","row","activityScore","toFixed","averagePerturbation","pValue","FDR","unshift","selectRow","clickToSelect","hideSelectAll","pagination","useMemo","alwaysShowAllBtns","showTotal","withFirstAndLast","sizePerPageRenderer","onSizePerPageChange","keyField","search","props","searchProps","baseProps","bootstrap4","bordered","defaultSorted","selectionProps","selectionState","setSelectionState","min","max","abs","shown","setShown","toggleModal","figure","fig_left","fig_right","src","alt","isOpen","toggle","maxWidth","pathwayActivityScore","averagePathwayPerturbation","pathwayPValue","pathwayFDR","push","isDummyField","headerStyle","stopPropagation","pathwayId","sort_by"],"mappings":"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","file":"js/910.js?id=5ed9b51a08df0f6b21f1","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\n\ninterface Props {\n    headerBg?: string;\n    title?: React.ReactNode;\n}\n\nconst DefaultHeader: React.FC<Props> = ({ headerBg, title }: Props) => {\n    return (\n        <>\n            <div\n                className={`header pb-8 pt-5 pt-lg-8 d-flex align-items-center ${\n                    headerBg ?? \"bg-gradient-gray-dark\"\n                }`}\n            >\n                <Container\n                    className=\"d-flex align-items-center flex-grow-1\"\n                    fluid\n                >\n                    <Row className=\"flex-grow-1\">\n                        <Col lg=\"7\" md=\"10\">\n                            <h1 className=\"display-2 text-white\">\n                                {title ?? \" \"}\n                            </h1>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </>\n    );\n};\n\nexport default DefaultHeader;\n","import { DependencyList, useEffect } from \"react\";\nimport { useDispatcher } from \"../Contexts/DispatcherProvider\";\n\ninterface Identifiable {\n    sender: string;\n}\n\nexport default function useDispatcherEvent<T>(\n    eventName: string,\n    callback: (data: T) => void,\n    deps?: DependencyList\n): void {\n    const dispatcher = useDispatcher();\n    useEffect(\n        () => {\n            dispatcher.on(eventName, callback);\n            return () => {\n                dispatcher.off(eventName, callback);\n            };\n        },\n        deps ? [...deps, callback] : deps\n    );\n}\n\nexport function useDispatcherEventWithSender<T extends Identifiable>(\n    eventName: string,\n    callback: (data: T) => void,\n    connectTo?: string | string[],\n    deps?: DependencyList\n): void {\n    useDispatcherEvent<T>(\n        eventName,\n        (data) => {\n            const { sender } = data;\n            if (\n                connectTo &&\n                ((typeof connectTo === \"string\" && sender === connectTo) ||\n                    connectTo.includes(sender))\n            ) {\n                callback(data);\n            }\n        },\n        deps ? [...deps, callback, connectTo] : deps\n    );\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n    Badge,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\";\nimport CorrelationGraph from \"../WikiPlugins/CorrelationGraph\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\n\ninterface Props {\n    simulation: number;\n    canEditPages: boolean;\n    onIdChange: (id: string) => void;\n}\n\ntype Correlation = \"pearson\" | \"spearman\";\ntype Direction = \"positive\" | \"negative\";\ntype SearchMode = \"all\" | \"any\";\n\ninterface State {\n    plugin: \"@Simulations:CorrelationGraph\";\n    id: string;\n    simulation: number;\n    fn: Correlation;\n    top: boolean;\n    n: number;\n    direction: Direction;\n    useEndpoints: boolean;\n    usePerturbation: boolean;\n    findByTags: string[];\n    searchMode: SearchMode;\n    title: string;\n    height: number;\n}\n\nconst CorrelationGraphEditor: React.FC<Props> = ({\n    simulation,\n    canEditPages,\n    onIdChange,\n}: Props) => {\n    const typeAheadRefTag = useRef<AsyncTypeahead<string>>(null);\n    const [isLoadingTags, setIsLoadingTags] = useState(false);\n    const [tagInputValue, setTagInputValue] = useState<string[]>([]);\n    const [tagInputOptions, setTagInputOptions] = useState<string[]>([]);\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:CorrelationGraph\",\n        id: `corr-graph-${Math.random().toString(36).substr(2, 10)}`,\n        simulation: simulation,\n        fn: \"pearson\",\n        top: false,\n        n: 10,\n        direction: \"negative\",\n        useEndpoints: true,\n        usePerturbation: false,\n        findByTags: [],\n        searchMode: \"all\",\n        title: \"\",\n        height: 600,\n    });\n\n    useEffect(() => {\n        onIdChange(state.id);\n    }, [state.id]);\n\n    const doAddTag = () => {\n        if (tagInputValue && tagInputValue.length > 0) {\n            const newTag = tagInputValue[0];\n            if (newTag) {\n                setState((prevState) => ({\n                    ...prevState,\n                    findByTags: [\n                        ...prevState.findByTags.filter((t) => t !== newTag),\n                        newTag,\n                    ],\n                }));\n                // @ts-ignore\n                typeAheadRefTag.current?.clear();\n            }\n        }\n    };\n    const handleSearchTag = async (query: string) => {\n        setIsLoadingTags(true);\n        try {\n            const response = await axios.post(route(\"tag.typeahead\"), {\n                query,\n            });\n            setTagInputOptions(response.data as string[]);\n        } catch (_) {\n            setTagInputOptions([]);\n        }\n        setIsLoadingTags(false);\n    };\n    const handleDeleteTag =\n        (tag: string) => (e: React.MouseEvent<HTMLAnchorElement>) => {\n            e.preventDefault();\n            setState((prevState) => ({\n                ...prevState,\n                findByTags: [...prevState.findByTags.filter((t) => t !== tag)],\n            }));\n        };\n\n    useEffect(() => {\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(state, undefined, 2)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl=\"8\">\n                    <CorrelationGraph {...state} />\n                </Col>\n                <Col xs=\"12\" xl=\"4\" className=\"d-flex flex-column\">\n                    <Card className=\"bg-gradient-dark shadow mb-2 flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Change your graph\n                            </h6>\n                        </CardHeader>\n                        <CardBody className=\"text-white-50\">\n                            <FormGroup>\n                                <Label for=\"input-title\">Title</Label>\n                                <Input\n                                    id=\"input-title\"\n                                    type=\"text\"\n                                    value={state.title}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            title: e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-height\">Height</Label>\n                                <Input\n                                    id=\"input-height\"\n                                    type=\"number\"\n                                    value={state.height}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            height: +e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-correlation\">\n                                    Correlation\n                                </Label>\n                                <Input\n                                    id=\"input-correlation\"\n                                    type=\"select\"\n                                    value={state.fn}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            fn: e.target\n                                                .value as unknown as Correlation,\n                                        }))\n                                    }\n                                >\n                                    <option value=\"pearson\">Pearson</option>\n                                    <option value=\"spearman\">Spearman</option>\n                                </Input>\n                            </FormGroup>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-use-endpoints\"\n                                    checked={state.useEndpoints}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            useEndpoints: e.target.checked,\n                                        }))\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-use-endpoints\"\n                                >\n                                    Compute correlation on Endpoints?\n                                </label>\n                            </div>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-use-perturbation\"\n                                    checked={state.usePerturbation}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            usePerturbation: e.target.checked,\n                                        }))\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-use-perturbation\"\n                                >\n                                    Compute correlation using Perturbation?\n                                </label>\n                            </div>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-top-n\"\n                                    checked={state.top}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            top: e.target.checked,\n                                        }))\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-top-n\"\n                                >\n                                    Show only the top-N results?\n                                </label>\n                            </div>\n                            {state.top && (\n                                <>\n                                    <FormGroup>\n                                        <Label for=\"input-number\">\n                                            Number of top results\n                                        </Label>\n                                        <Input\n                                            id=\"input-number\"\n                                            type=\"number\"\n                                            value={state.n}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    n: +e.target.value,\n                                                }))\n                                            }\n                                        />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label for=\"input-direction\">\n                                            Direction\n                                        </Label>\n                                        <Input\n                                            id=\"input-direction\"\n                                            type=\"select\"\n                                            value={state.direction}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    direction: e.target\n                                                        .value as unknown as Direction,\n                                                }))\n                                            }\n                                        >\n                                            <option value=\"positive\">\n                                                Top-N positive\n                                            </option>\n                                            <option value=\"negative\">\n                                                Top-N negative\n                                            </option>\n                                        </Input>\n                                    </FormGroup>\n                                </>\n                            )}\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs=\"12\" xl={canEditPages ? \"8\" : \"12\"}>\n                    <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Add columns\n                            </h6>\n                        </CardHeader>\n                        <CardBody>\n                            <div className=\"d-flex flex-row justify-content-start align-items-center text-sm text-white-50 flex-wrap\">\n                                <div>Compare with simulations having</div>\n                                <Input\n                                    type=\"select\"\n                                    value={state.searchMode ?? \"all\"}\n                                    className=\"form-control-sm mx-2\"\n                                    style={{ width: \"auto\" }}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            searchMode: e.target\n                                                .value as unknown as SearchMode,\n                                        }))\n                                    }\n                                >\n                                    <option value=\"all\">all</option>\n                                    <option value=\"any\">any</option>\n                                </Input>\n                                <div>tags:</div>\n                            </div>\n                            <Row>\n                                <Col\n                                    style={{ height: \"100px\" }}\n                                    className=\"overflow-auto\"\n                                >\n                                    {state.findByTags.map((tag) => (\n                                        <Badge\n                                            key={tag}\n                                            className=\"badge-default mx-1 text-light\"\n                                            href=\"#\"\n                                            onClick={handleDeleteTag(tag)}\n                                            title=\"Click to delete\"\n                                        >\n                                            {tag}\n                                        </Badge>\n                                    ))}\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-2\">\n                                <Col>\n                                    <InputGroup>\n                                        <AsyncTypeahead<string>\n                                            filterBy={() => true}\n                                            id=\"tags-add-tag-input\"\n                                            isLoading={isLoadingTags}\n                                            options={tagInputOptions}\n                                            onSearch={handleSearchTag}\n                                            onChange={(selected: string[]) =>\n                                                setTagInputValue(selected)\n                                            }\n                                            onKeyDown={(e) => {\n                                                const re =\n                                                    e as unknown as React.KeyboardEvent<HTMLInputElement>;\n                                                if (\n                                                    re.code === \"Enter\" ||\n                                                    re.code === \"NumpadEnter\"\n                                                ) {\n                                                    doAddTag();\n                                                }\n                                            }}\n                                            selected={tagInputValue}\n                                            minLength={3}\n                                            className=\"text-dark\"\n                                            placeholder=\"Add new tag (category: tag)\"\n                                            ref={typeAheadRefTag}\n                                        />\n                                        <InputGroupAddon addonType=\"append\">\n                                            <InputGroupText>\n                                                <a\n                                                    className=\"text-primary\"\n                                                    href=\"#\"\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        doAddTag();\n                                                    }}\n                                                >\n                                                    <i className=\"fas fa-plus\" />\n                                                </a>\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                    </InputGroup>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Col>\n                {canEditPages && (\n                    <Col xs=\"12\" xl=\"4\">\n                        <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                )}\n            </Row>\n        </>\n    );\n};\n\nexport default CorrelationGraphEditor;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { SortOrder } from \"react-bootstrap-table-next\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport NodesTable, { Node } from \"../WikiPlugins/NodesTable\";\n\ninterface Props {\n    simulation: number;\n    pathway?: string;\n    canEditPages: boolean;\n    onSelect?: (node: string, pathway: string) => void;\n}\n\ninterface State {\n    plugin: \"@Simulations:NodesTable\";\n    simulation: number;\n    pathway?: string;\n    nodes: string[];\n    sortable: boolean;\n    filterable: boolean;\n    defaultSorting: { dataField: keyof Node; order: SortOrder };\n}\n\nconst NodesTableEditor: React.FC<Props> = ({\n    simulation,\n    pathway,\n    canEditPages,\n    onSelect,\n}: Props) => {\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [useNodesSelection, setUseNodesSelection] = useState(false);\n    const [nodesSelection, setNodesSelection] = useState<string[]>([]);\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:NodesTable\",\n        simulation,\n        pathway,\n        nodes: [],\n        sortable: true,\n        filterable: true,\n        defaultSorting: {\n            dataField: \"FDR\",\n            order: \"asc\",\n        },\n    });\n\n    const internalOnSelect = canEditPages\n        ? (node: string) => {\n              setNodesSelection((prevState) => {\n                  if (prevState.includes(node)) {\n                      return prevState.filter((v) => v !== node);\n                  } else {\n                      return [...prevState, node];\n                  }\n              });\n              if (onSelect && pathway) onSelect(node, pathway);\n          }\n        : undefined;\n\n    useEffect(() => {\n        const realState =\n            useNodesSelection && nodesSelection.length > 0\n                ? {\n                      ...state,\n                      nodes: nodesSelection,\n                  }\n                : state;\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(realState, undefined, 2)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state, useNodesSelection, nodesSelection]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl={canEditPages ? 8 : 12}>\n                    <NodesTable\n                        {...state}\n                        onSelect={internalOnSelect}\n                        enableId\n                    />\n                </Col>\n                {canEditPages && (\n                    <Col xs=\"12\" xl=\"4\">\n                        <Card className=\"bg-gradient-dark shadow mb-2\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                    Edit Plugin\n                                </h6>\n                            </CardHeader>\n                            <CardBody className=\"text-white-50\">\n                                <div className=\"custom-control custom-checkbox mb-3\">\n                                    <input\n                                        className=\"custom-control-input\"\n                                        id=\"check-nodes\"\n                                        checked={useNodesSelection}\n                                        disabled={nodesSelection.length === 0}\n                                        type=\"checkbox\"\n                                        onChange={(e) =>\n                                            setUseNodesSelection(\n                                                e.target.checked\n                                            )\n                                        }\n                                    />\n                                    <label\n                                        className=\"custom-control-label\"\n                                        htmlFor=\"check-nodes\"\n                                    >\n                                        Show only selected nodes? (The editor\n                                        will not reflect this change)\n                                    </label>\n                                </div>\n                                <div className=\"custom-control custom-checkbox mb-3\">\n                                    <input\n                                        className=\"custom-control-input\"\n                                        id=\"check-filterable\"\n                                        checked={state.filterable}\n                                        type=\"checkbox\"\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                filterable: e.target.checked,\n                                            }))\n                                        }\n                                    />\n                                    <label\n                                        className=\"custom-control-label\"\n                                        htmlFor=\"check-filterable\"\n                                    >\n                                        Enable search?\n                                    </label>\n                                </div>\n                                <div className=\"custom-control custom-checkbox mb-3\">\n                                    <input\n                                        className=\"custom-control-input\"\n                                        id=\"check-sortable\"\n                                        checked={state.sortable}\n                                        type=\"checkbox\"\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                sortable: e.target.checked,\n                                            }))\n                                        }\n                                    />\n                                    <label\n                                        className=\"custom-control-label\"\n                                        htmlFor=\"check-sortable\"\n                                    >\n                                        Enable sorting?\n                                    </label>\n                                </div>\n                                {state.sortable && (\n                                    <>\n                                        <FormGroup>\n                                            <Label for=\"input-sortBy\">\n                                                Sorting\n                                            </Label>\n                                            <Row>\n                                                <Col xs={6}>\n                                                    <Input\n                                                        id=\"input-sortBy\"\n                                                        type=\"select\"\n                                                        value={\n                                                            state.defaultSorting\n                                                                .dataField\n                                                        }\n                                                        onChange={(e) =>\n                                                            setState(\n                                                                (\n                                                                    prevState\n                                                                ) => ({\n                                                                    ...prevState,\n                                                                    defaultSorting:\n                                                                        {\n                                                                            ...prevState.defaultSorting,\n                                                                            dataField:\n                                                                                e\n                                                                                    .target\n                                                                                    .value as keyof Node,\n                                                                        },\n                                                                })\n                                                            )\n                                                        }\n                                                    >\n                                                        <option value=\"nodeId\">\n                                                            Id\n                                                        </option>\n                                                        <option value=\"nodeName\">\n                                                            Name\n                                                        </option>\n                                                        <option value=\"activityScore\">\n                                                            Activity Score\n                                                        </option>\n                                                        <option value=\"averagePerturbation\">\n                                                            Perturbation\n                                                        </option>\n                                                        <option value=\"pValue\">\n                                                            p-value\n                                                        </option>\n                                                        <option value=\"FDR\">\n                                                            FDR\n                                                        </option>\n                                                    </Input>\n                                                </Col>\n                                                <Col xs={6}>\n                                                    <Input\n                                                        id=\"input-sortDirection\"\n                                                        type=\"select\"\n                                                        value={\n                                                            state.defaultSorting\n                                                                .order\n                                                        }\n                                                        onChange={(e) =>\n                                                            setState(\n                                                                (\n                                                                    prevState\n                                                                ) => ({\n                                                                    ...prevState,\n                                                                    defaultSorting:\n                                                                        {\n                                                                            ...prevState.defaultSorting,\n                                                                            order: e\n                                                                                .target\n                                                                                .value as SortOrder,\n                                                                        },\n                                                                })\n                                                            )\n                                                        }\n                                                    >\n                                                        <option value=\"asc\">\n                                                            ASC\n                                                        </option>\n                                                        <option value=\"desc\">\n                                                            DESC\n                                                        </option>\n                                                    </Input>\n                                                </Col>\n                                            </Row>\n                                        </FormGroup>\n                                    </>\n                                )}\n                            </CardBody>\n                        </Card>\n                        <Card className=\"bg-gradient-dark shadow\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                )}\n            </Row>\n        </>\n    );\n};\n\nexport default NodesTableEditor;\n","export function filterByKey<T>(\n    raw: T,\n    callback: (k: keyof T) => boolean\n): Partial<T> {\n    return Object.keys(raw)\n        .filter((k) => callback(k as keyof T))\n        .reduce((obj, key) => {\n            return {\n                ...obj,\n                [key]: raw[key as keyof T],\n            };\n        }, {}) as unknown as Partial<T>;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { filterByKey } from \"../../../Common/utils\";\nimport PartialCorrelationGraph from \"../WikiPlugins/PartialCorrelationGraph\";\nimport { useDispatcherEventWithSender } from \"../../../Hooks/useDispatcherEvent\";\nimport { SelectedSimulation } from \"../WikiPlugins/CorrelationGraph\";\n\ninterface Props {\n    simulation: number;\n    canEditPages: boolean;\n    correlationGraphId?: string;\n}\n\ntype Correlation = \"pearson\" | \"spearman\";\ntype Direction = \"positive\" | \"negative\" | \"both\";\n\ninterface State {\n    plugin: \"@Simulations:PartialCorrelationGraph\";\n    id?: string;\n    simulation: number;\n    compareWith?: number;\n    fn: Correlation;\n    top: boolean;\n    n: number;\n    direction: Direction;\n    useEndpoints: boolean;\n    usePerturbation: boolean;\n    title: string;\n    height: number;\n    connectedTo?: string;\n}\n\nconst CorrelationGraphEditor: React.FC<Props> = ({\n    simulation,\n    canEditPages,\n    correlationGraphId,\n}: Props) => {\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [connected, setConnected] = useState(false);\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:PartialCorrelationGraph\",\n        id: `partial-corr-graph-${Math.random().toString(36).substr(2, 10)}`,\n        simulation: simulation,\n        fn: \"pearson\",\n        top: false,\n        n: 10,\n        direction: \"negative\",\n        useEndpoints: true,\n        usePerturbation: false,\n        title: \"\",\n        height: 600,\n    });\n\n    useDispatcherEventWithSender<SelectedSimulation>(\n        \"onCorrelationGraphBarClick\",\n        (selection) => {\n            setState((prevState) => ({\n                ...prevState,\n                ...filterByKey(selection, (k) => k !== \"sender\"),\n            }));\n        },\n        correlationGraphId,\n        [setState]\n    );\n\n    useEffect(() => {\n        const tmpState = filterByKey(\n            state,\n            (k) =>\n                !connected ||\n                ![\n                    \"compareWith\",\n                    \"fn\",\n                    \"useEndpoints\",\n                    \"usePerturbation\",\n                ].includes(k)\n        );\n        if (connected) {\n            tmpState[\"connectedTo\"] = correlationGraphId;\n        }\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(tmpState, undefined, 2)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state, connected, correlationGraphId]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl=\"8\">\n                    <PartialCorrelationGraph\n                        {...state}\n                        connectedTo={correlationGraphId}\n                    />\n                </Col>\n                <Col xs=\"12\" xl=\"4\" className=\"d-flex flex-column\">\n                    <Card className=\"bg-gradient-dark shadow mb-2 flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Change your graph\n                            </h6>\n                        </CardHeader>\n                        <CardBody className=\"text-white-50\">\n                            <FormGroup>\n                                <Label for=\"input-title-pcorr\">Title</Label>\n                                <Input\n                                    id=\"input-title-pcorr\"\n                                    type=\"text\"\n                                    value={state.title}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            title: e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-height-pcorr\">Height</Label>\n                                <Input\n                                    id=\"input-height-pcorr\"\n                                    type=\"number\"\n                                    value={state.height}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            height: +e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-is-connected\"\n                                    checked={connected}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setConnected(e.target.checked)\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-is-connected\"\n                                >\n                                    {`Link to the correlation graph?${\n                                        canEditPages\n                                            ? ` (If you\n                                    enable this option do not close the page\n                                    until you copied the code for both\n                                    correlation graph and detail graph).`\n                                            : \"\"\n                                    }`}\n                                </label>\n                            </div>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-top-n-pcorr\"\n                                    checked={state.top}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            top: e.target.checked,\n                                        }))\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-top-n-pcorr\"\n                                >\n                                    Show only the top-N results?\n                                </label>\n                            </div>\n                            {state.top && (\n                                <>\n                                    <FormGroup>\n                                        <Label for=\"input-number-pcorr\">\n                                            Number of top results\n                                        </Label>\n                                        <Input\n                                            id=\"input-number-pcorr\"\n                                            type=\"number\"\n                                            value={state.n}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    n: +e.target.value,\n                                                }))\n                                            }\n                                        />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label for=\"input-direction-pcorr\">\n                                            Direction\n                                        </Label>\n                                        <Input\n                                            id=\"input-direction-pcorr\"\n                                            type=\"select\"\n                                            value={state.direction}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    direction: e.target\n                                                        .value as unknown as Direction,\n                                                }))\n                                            }\n                                        >\n                                            <option value=\"both\">Both</option>\n                                            <option value=\"positive\">\n                                                Top-N positive\n                                            </option>\n                                            <option value=\"negative\">\n                                                Top-N negative\n                                            </option>\n                                        </Input>\n                                    </FormGroup>\n                                </>\n                            )}\n                        </CardBody>\n                    </Card>\n                    {canEditPages && (\n                        <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    )}\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default CorrelationGraphEditor;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport PathwayImage from \"../WikiPlugins/PathwayImage\";\n\ninterface Props {\n    simulation: number;\n    pathway?: string;\n    canEditPages: boolean;\n    pathwaysToNames: Record<string, string>;\n}\n\ntype Position = \"left\" | \"center\" | \"right\";\n\ninterface State {\n    plugin: \"@Simulations:PathwayImage\";\n    simulation: number;\n    pathway?: string;\n    legend: string;\n    position: Position;\n}\n\nconst PathwaysTableEditor: React.FC<Props> = ({\n    simulation,\n    pathway,\n    canEditPages,\n    pathwaysToNames,\n}: Props) => {\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:PathwayImage\",\n        simulation,\n        pathway,\n        legend: pathway ? pathwaysToNames[pathway] : \"\",\n        position: \"center\",\n    });\n\n    useEffect(() => {\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(state, undefined, 2)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl={canEditPages ? 8 : 12}>\n                    <PathwayImage {...state} />\n                </Col>\n                {canEditPages && (\n                    <Col xs=\"12\" xl=\"4\">\n                        <Card className=\"bg-gradient-dark shadow mb-2\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                    Edit Plugin\n                                </h6>\n                            </CardHeader>\n                            <CardBody className=\"text-white-50\">\n                                <FormGroup>\n                                    <Label for=\"input-legend\">Legend</Label>\n                                    <Input\n                                        id=\"input-legend\"\n                                        type=\"text\"\n                                        value={state.legend}\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                legend: e.target.value,\n                                            }))\n                                        }\n                                    />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label for=\"input-position\">Position</Label>\n                                    <Input\n                                        id=\"input-position\"\n                                        type=\"select\"\n                                        value={state.position}\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                position: e.target\n                                                    .value as Position,\n                                            }))\n                                        }\n                                    >\n                                        <option value=\"left\">Left</option>\n                                        <option value=\"center\">Center</option>\n                                        <option value=\"right\">Right</option>\n                                    </Input>\n                                </FormGroup>\n                            </CardBody>\n                        </Card>\n                        <Card className=\"bg-gradient-dark shadow\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                )}\n            </Row>\n        </>\n    );\n};\n\nexport default PathwaysTableEditor;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport PathwaysTable, { Pathway } from \"../WikiPlugins/PathwaysTable\";\nimport { SortOrder } from \"react-bootstrap-table-next\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"react-select2-wrapper/css/select2.css\";\n\ninterface Props {\n    simulation: number;\n    canEditPages: boolean;\n    onSelect?: (pathway: string) => void;\n    onView?: (pathway: string) => void;\n}\n\ninterface State {\n    plugin: \"@Simulations:PathwaysTable\";\n    simulation: number;\n    pathways: string[];\n    sortable: boolean;\n    filterable: boolean;\n    defaultSorting: { dataField: keyof Pathway; order: SortOrder };\n}\n\nconst PathwaysTableEditor: React.FC<Props> = ({\n    simulation,\n    canEditPages,\n    onSelect,\n    onView,\n}: Props) => {\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [usePathwaysSelection, setUsePathwaysSelection] = useState(false);\n    const [pathwaysSelection, setPathwaysSelection] = useState<string[]>([]);\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:PathwaysTable\",\n        simulation: simulation,\n        pathways: [],\n        sortable: true,\n        filterable: true,\n        defaultSorting: {\n            dataField: \"pathwayFDR\",\n            order: \"asc\",\n        },\n    });\n\n    const internalOnSelect = canEditPages\n        ? (pathway: string) => {\n              setPathwaysSelection((prevState) => {\n                  if (prevState.includes(pathway)) {\n                      return prevState.filter((v) => v !== pathway);\n                  } else {\n                      return [...prevState, pathway];\n                  }\n              });\n              if (onSelect && pathway) onSelect(pathway);\n          }\n        : undefined;\n\n    useEffect(() => {\n        const realState =\n            usePathwaysSelection && pathwaysSelection.length > 0\n                ? {\n                      ...state,\n                      pathways: pathwaysSelection,\n                  }\n                : state;\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(realState, undefined, 2)}\n\\`\\`\\``);\n    }, [\n        setPluginCode,\n        simulation,\n        state,\n        usePathwaysSelection,\n        pathwaysSelection,\n    ]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl={canEditPages ? 8 : 12}>\n                    <PathwaysTable\n                        {...state}\n                        onSelect={internalOnSelect}\n                        onView={onView}\n                        enableId\n                    />\n                </Col>\n                {canEditPages && (\n                    <Col xs=\"12\" xl=\"4\">\n                        <Card className=\"bg-gradient-dark shadow mb-2\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                    Edit Plugin\n                                </h6>\n                            </CardHeader>\n                            <CardBody className=\"text-white-50\">\n                                <div className=\"custom-control custom-checkbox mb-3\">\n                                    <input\n                                        className=\"custom-control-input\"\n                                        id=\"check-pathways\"\n                                        checked={usePathwaysSelection}\n                                        disabled={\n                                            pathwaysSelection.length === 0\n                                        }\n                                        type=\"checkbox\"\n                                        onChange={(e) =>\n                                            setUsePathwaysSelection(\n                                                e.target.checked\n                                            )\n                                        }\n                                    />\n                                    <label\n                                        className=\"custom-control-label\"\n                                        htmlFor=\"check-pathways\"\n                                    >\n                                        Show only selected pathways? (The editor\n                                        will not reflect this change)\n                                    </label>\n                                </div>\n                                <div className=\"custom-control custom-checkbox mb-3\">\n                                    <input\n                                        className=\"custom-control-input\"\n                                        id=\"check-filterable\"\n                                        checked={state.filterable}\n                                        type=\"checkbox\"\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                filterable: e.target.checked,\n                                            }))\n                                        }\n                                    />\n                                    <label\n                                        className=\"custom-control-label\"\n                                        htmlFor=\"check-filterable\"\n                                    >\n                                        Enable search?\n                                    </label>\n                                </div>\n                                <div className=\"custom-control custom-checkbox mb-3\">\n                                    <input\n                                        className=\"custom-control-input\"\n                                        id=\"check-sortable\"\n                                        checked={state.sortable}\n                                        type=\"checkbox\"\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                sortable: e.target.checked,\n                                            }))\n                                        }\n                                    />\n                                    <label\n                                        className=\"custom-control-label\"\n                                        htmlFor=\"check-sortable\"\n                                    >\n                                        Enable sorting?\n                                    </label>\n                                </div>\n                                {state.sortable && (\n                                    <>\n                                        <FormGroup>\n                                            <Label for=\"input-sortBy\">\n                                                Sorting\n                                            </Label>\n                                            <Row>\n                                                <Col xs={6}>\n                                                    <Input\n                                                        id=\"input-sortBy\"\n                                                        type=\"select\"\n                                                        value={\n                                                            state.defaultSorting\n                                                                .dataField\n                                                        }\n                                                        onChange={(e) =>\n                                                            setState(\n                                                                (\n                                                                    prevState\n                                                                ) => ({\n                                                                    ...prevState,\n                                                                    defaultSorting:\n                                                                        {\n                                                                            ...prevState.defaultSorting,\n                                                                            dataField:\n                                                                                e\n                                                                                    .target\n                                                                                    .value as keyof Pathway,\n                                                                        },\n                                                                })\n                                                            )\n                                                        }\n                                                    >\n                                                        <option value=\"pathwayId\">\n                                                            Id\n                                                        </option>\n                                                        <option value=\"pathwayName\">\n                                                            Name\n                                                        </option>\n                                                        <option value=\"pathwayActivityScore\">\n                                                            Activity Score\n                                                        </option>\n                                                        <option value=\"averagePathwayPerturbation\">\n                                                            Perturbation\n                                                        </option>\n                                                        <option value=\"pathwayPValue\">\n                                                            p-value\n                                                        </option>\n                                                        <option value=\"pathwayFDR\">\n                                                            FDR\n                                                        </option>\n                                                    </Input>\n                                                </Col>\n                                                <Col xs={6}>\n                                                    <Input\n                                                        id=\"input-sortDirection\"\n                                                        type=\"select\"\n                                                        value={\n                                                            state.defaultSorting\n                                                                .order\n                                                        }\n                                                        onChange={(e) =>\n                                                            setState(\n                                                                (\n                                                                    prevState\n                                                                ) => ({\n                                                                    ...prevState,\n                                                                    defaultSorting:\n                                                                        {\n                                                                            ...prevState.defaultSorting,\n                                                                            order: e\n                                                                                .target\n                                                                                .value as SortOrder,\n                                                                        },\n                                                                })\n                                                            )\n                                                        }\n                                                    >\n                                                        <option value=\"asc\">\n                                                            ASC\n                                                        </option>\n                                                        <option value=\"desc\">\n                                                            DESC\n                                                        </option>\n                                                    </Input>\n                                                </Col>\n                                            </Row>\n                                        </FormGroup>\n                                    </>\n                                )}\n                            </CardBody>\n                        </Card>\n                        <Card className=\"bg-gradient-dark shadow\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                )}\n            </Row>\n        </>\n    );\n};\n\nexport default PathwaysTableEditor;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n    Badge,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport SimulationHeatmap from \"../WikiPlugins/SimulationHeatmap\";\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\n\ninterface Props {\n    simulation: number;\n    canEditPages: boolean;\n    selectedPathways: string[];\n    selectedNodes: Record<string, string[]>;\n}\n\ntype Limit = \"none\" | \"positive\" | \"negative\";\n\ninterface State {\n    plugin: \"@Simulations:SimulationHeatmap\";\n    simulation: number;\n    type: \"pathways\" | \"nodes\";\n    mode: \"top\" | \"selected\";\n    sortBy: \"perturbation\" | \"activity\";\n    n: number;\n    absolute: boolean;\n    limit: Limit;\n    attach: {\n        tags: string[];\n        mode: \"all\" | \"any\";\n        simulations: string[];\n    };\n    title: string;\n    height: number;\n}\n\nconst SimulationHeatmapEditor: React.FC<Props> = ({\n    simulation,\n    canEditPages,\n    selectedPathways,\n    selectedNodes,\n}: Props) => {\n    const typeAheadRefTag = useRef<AsyncTypeahead<string>>(null);\n    const [isLoadingTags, setIsLoadingTags] = useState(false);\n    const [tagInputValue, setTagInputValue] = useState<string[]>([]);\n    const [tagInputOptions, setTagInputOptions] = useState<string[]>([]);\n    const selectedNodesVector = Object.values(selectedNodes).flatMap((a) => a);\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:SimulationHeatmap\",\n        simulation: simulation,\n        type: \"pathways\",\n        mode: \"top\",\n        sortBy: \"perturbation\",\n        n: 10,\n        absolute: false,\n        limit: \"none\",\n        attach: {\n            tags: [],\n            mode: \"all\",\n            simulations: [],\n        },\n        title: \"\",\n        height: 600,\n    });\n    const selection =\n        state.type === \"pathways\" ? selectedPathways : selectedNodesVector;\n    const selectionDisabled = selection.length === 0;\n    const selectionText = selectionDisabled\n        ? ` (Select at least one ${\n              state.type === \"pathways\" ? \"pathway\" : \"node\"\n          } to enable)`\n        : \"\";\n\n    const doAddTag = () => {\n        if (tagInputValue && tagInputValue.length > 0) {\n            const newTag = tagInputValue[0];\n            if (newTag) {\n                setState((prevState) => ({\n                    ...prevState,\n                    attach: {\n                        ...prevState.attach,\n                        tags: [\n                            ...prevState.attach.tags.filter(\n                                (t) => t !== newTag\n                            ),\n                            newTag,\n                        ],\n                    },\n                }));\n                // @ts-ignore\n                typeAheadRefTag.current?.clear();\n            }\n        }\n    };\n    const handleSearchTag = async (query: string) => {\n        setIsLoadingTags(true);\n        try {\n            const response = await axios.post(route(\"tag.typeahead\"), {\n                query,\n            });\n            setTagInputOptions(response.data as string[]);\n        } catch (_) {\n            setTagInputOptions([]);\n        }\n        setIsLoadingTags(false);\n    };\n    const handleDeleteTag =\n        (tag: string) => (e: React.MouseEvent<HTMLAnchorElement>) => {\n            e.preventDefault();\n            setState((prevState) => ({\n                ...prevState,\n                attach: {\n                    ...prevState.attach,\n                    tags: [...prevState.attach.tags.filter((t) => t !== tag)],\n                },\n            }));\n        };\n\n    useEffect(() => {\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(\n    {\n        ...state,\n        selection: state.mode === \"selected\" ? selection : undefined,\n    },\n    undefined,\n    2\n)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state, selection]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl=\"8\">\n                    <SimulationHeatmap\n                        {...state}\n                        selection={\n                            state.mode === \"selected\" ? selection : undefined\n                        }\n                    />\n                </Col>\n                <Col xs=\"12\" xl=\"4\" className=\"d-flex flex-column\">\n                    <Card className=\"bg-gradient-dark shadow mb-2 flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Change your heatmap\n                            </h6>\n                        </CardHeader>\n                        <CardBody className=\"text-white-50\">\n                            <FormGroup>\n                                <Label for=\"input-title\">Title</Label>\n                                <Input\n                                    id=\"input-title\"\n                                    type=\"text\"\n                                    value={state.title}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            title: e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-height\">Height</Label>\n                                <Input\n                                    id=\"input-height\"\n                                    type=\"number\"\n                                    value={state.height}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            height: +e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-type\">Type</Label>\n                                <Input\n                                    id=\"input-type\"\n                                    type=\"select\"\n                                    value={state.type}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            type:\n                                                e.target.value === \"pathways\"\n                                                    ? \"pathways\"\n                                                    : \"nodes\",\n                                        }))\n                                    }\n                                >\n                                    <option value=\"pathways\">Pathways</option>\n                                    <option value=\"nodes\">Nodes</option>\n                                </Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-sortBy\">Sort by</Label>\n                                <Input\n                                    id=\"input-sortBy\"\n                                    type=\"select\"\n                                    value={state.sortBy}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            sortBy:\n                                                e.target.value ===\n                                                \"perturbation\"\n                                                    ? \"perturbation\"\n                                                    : \"activity\",\n                                        }))\n                                    }\n                                >\n                                    <option value=\"perturbation\">\n                                        Perturbation\n                                    </option>\n                                    <option value=\"activity\">Activity</option>\n                                </Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-mode\">Mode</Label>\n                                <Input\n                                    id=\"input-mode\"\n                                    type=\"select\"\n                                    value={state.mode}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            mode:\n                                                e.target.value === \"top\"\n                                                    ? \"top\"\n                                                    : \"selected\",\n                                        }))\n                                    }\n                                >\n                                    <option value=\"top\">Top-N</option>\n                                    <option\n                                        value=\"selected\"\n                                        disabled={selectionDisabled}\n                                    >\n                                        {`Selected${selectionText}`}\n                                    </option>\n                                </Input>\n                            </FormGroup>\n                            {state.mode === \"top\" && (\n                                <>\n                                    <FormGroup>\n                                        <Label for=\"input-number\">\n                                            Number of top {state.type}\n                                        </Label>\n                                        <Input\n                                            id=\"input-number\"\n                                            type=\"number\"\n                                            value={state.n}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    n: +e.target.value,\n                                                }))\n                                            }\n                                        />\n                                    </FormGroup>\n                                    <div className=\"custom-control custom-checkbox mb-3\">\n                                        <input\n                                            className=\"custom-control-input\"\n                                            id=\"check-absolute\"\n                                            checked={state.absolute}\n                                            type=\"checkbox\"\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    absolute: e.target.checked,\n                                                }))\n                                            }\n                                        />\n                                        <label\n                                            className=\"custom-control-label\"\n                                            htmlFor=\"check-absolute\"\n                                        >\n                                            Sort by absolute value?\n                                        </label>\n                                    </div>\n                                    <FormGroup>\n                                        <Label for=\"input-limit\">\n                                            Limit selection\n                                        </Label>\n                                        <Input\n                                            id=\"input-limit\"\n                                            type=\"select\"\n                                            value={state.limit}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    limit: e.target\n                                                        .value as Limit,\n                                                }))\n                                            }\n                                        >\n                                            <option value=\"none\">None</option>\n                                            <option value=\"positive\">\n                                                Positive values\n                                            </option>\n                                            <option value=\"negative\">\n                                                Negative values\n                                            </option>\n                                        </Input>\n                                    </FormGroup>\n                                </>\n                            )}\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs=\"12\" xl={canEditPages ? \"8\" : \"12\"}>\n                    <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Add columns\n                            </h6>\n                        </CardHeader>\n                        <CardBody>\n                            <div className=\"d-flex flex-row justify-content-start align-items-center text-sm text-white-50 flex-wrap\">\n                                <div>\n                                    Add a column for each simulation having\n                                </div>\n                                <Input\n                                    type=\"select\"\n                                    value={state.attach?.mode ?? \"all\"}\n                                    className=\"form-control-sm mx-2\"\n                                    style={{ width: \"auto\" }}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            attach: {\n                                                ...state.attach,\n                                                mode:\n                                                    e.target.value === \"all\"\n                                                        ? \"all\"\n                                                        : \"any\",\n                                            },\n                                        }))\n                                    }\n                                >\n                                    <option value=\"all\">all</option>\n                                    <option value=\"any\">any</option>\n                                </Input>\n                                <div>tags:</div>\n                            </div>\n                            <Row>\n                                <Col\n                                    style={{ height: \"100px\" }}\n                                    className=\"overflow-auto\"\n                                >\n                                    {state.attach?.tags?.map((tag) => (\n                                        <Badge\n                                            key={tag}\n                                            className=\"badge-default mx-1 text-light\"\n                                            href=\"#\"\n                                            onClick={handleDeleteTag(tag)}\n                                            title=\"Click to delete\"\n                                        >\n                                            {tag}\n                                        </Badge>\n                                    ))}\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-2\">\n                                <Col>\n                                    <InputGroup>\n                                        <AsyncTypeahead<string>\n                                            filterBy={() => true}\n                                            id=\"tags-add-tag-input\"\n                                            isLoading={isLoadingTags}\n                                            options={tagInputOptions}\n                                            onSearch={handleSearchTag}\n                                            onChange={(selected: string[]) =>\n                                                setTagInputValue(selected)\n                                            }\n                                            onKeyDown={(e) => {\n                                                const re =\n                                                    e as unknown as React.KeyboardEvent<HTMLInputElement>;\n                                                if (\n                                                    re.code === \"Enter\" ||\n                                                    re.code === \"NumpadEnter\"\n                                                ) {\n                                                    doAddTag();\n                                                }\n                                            }}\n                                            selected={tagInputValue}\n                                            minLength={3}\n                                            className=\"text-dark\"\n                                            placeholder=\"Add new tag (category: tag)\"\n                                            ref={typeAheadRefTag}\n                                        />\n                                        <InputGroupAddon addonType=\"append\">\n                                            <InputGroupText>\n                                                <a\n                                                    className=\"text-primary\"\n                                                    href=\"#\"\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        doAddTag();\n                                                    }}\n                                                >\n                                                    <i className=\"fas fa-plus\" />\n                                                </a>\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                    </InputGroup>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Col>\n                {canEditPages && (\n                    <Col xs=\"12\" xl=\"4\">\n                        <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                )}\n            </Row>\n        </>\n    );\n};\n\nexport default SimulationHeatmapEditor;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState } from \"react\";\nimport { get } from \"lodash\";\nimport Header from \"../../../../Components/Layout/Headers/DefaultHeader\";\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    Container,\n    Nav,\n    NavItem,\n    NavLink,\n    Row,\n} from \"reactstrap\";\nimport type { CommonPageProps } from \"../../../../Types/page\";\nimport PathwaysTableEditor from \"../../Components/PathwaysTableEditor\";\nimport classNames from \"classnames\";\nimport NodesTableEditor from \"../../Components/NodesTableEditor\";\nimport PathwayImageEditor from \"../../Components/PathwayImageEditor\";\nimport SimulationHeatmapEditor from \"../../Components/SimulationHeatmapEditor\";\nimport CorrelationGraphEditor from \"../../Components/CorrelationGraphEditor\";\nimport PartialCorrelationGraphEditor from \"../../Components/PartialCorrelationGraphEditor\";\n\ninterface Props extends CommonPageProps {\n    simulation: {\n        id: number;\n        name: string;\n    };\n    pathwaysToNames: Record<string, string>;\n    nodesToNames: Record<string, string>;\n}\n\ntype SelectedNodesType = Record<string, string[]>;\n\nconst Index: React.FC<Props> = ({\n    simulation,\n    capabilities: {\n        pages: { update: canEditPages },\n    },\n    pathwaysToNames,\n}: Props) => {\n    const [selectedNav, setSelectedNav] = useState<number>(1);\n    const [currentPathway, setCurrentPathway] = useState<string | undefined>();\n    const [selectedPathways, setSelectedPathways] = useState<string[]>([]);\n    const [selectedNodes, setSelectedNodes] = useState<SelectedNodesType>({});\n    const [correlationGraphId, setCorrelationGraphId] = useState<string>();\n    const changeSelectedNav =\n        (selection: number) => (e: React.MouseEvent<HTMLAnchorElement>) => {\n            e.preventDefault();\n            setSelectedNav(selection);\n        };\n    const onSelectPathway = canEditPages\n        ? (pathway: string) => {\n              setSelectedPathways((prevState) => {\n                  if (prevState.includes(pathway)) {\n                      return prevState.filter((v) => v !== pathway);\n                  } else {\n                      return [...prevState, pathway];\n                  }\n              });\n          }\n        : undefined;\n    const onSelectNode = canEditPages\n        ? (node: string, pathway: string) => {\n              setSelectedNodes((prevState) => {\n                  const prevSelection: string[] = get(prevState, pathway, []);\n                  if (prevSelection.includes(node)) {\n                      return {\n                          ...prevState,\n                          [pathway]: prevSelection.filter((v) => v !== node),\n                      };\n                  } else {\n                      return {\n                          ...prevState,\n                          [pathway]: [...prevSelection, node],\n                      };\n                  }\n              });\n          }\n        : undefined;\n\n    return (\n        <>\n            <Header title={simulation.name} />\n            <Container className=\"mt--7\" fluid>\n                <Row className=\"mb-2\">\n                    <Col>\n                        <Nav\n                            className=\"nav-fill flex-column flex-sm-row\"\n                            pills\n                            role=\"tablist\"\n                        >\n                            <NavItem>\n                                <NavLink\n                                    aria-selected={selectedNav === 1}\n                                    className={classNames(\"mb-sm-3 mb-md-0\", {\n                                        active: selectedNav === 1,\n                                    })}\n                                    onClick={changeSelectedNav(1)}\n                                    href=\"#\"\n                                    role=\"tab\"\n                                >\n                                    Pathways Table\n                                </NavLink>\n                            </NavItem>\n                            {currentPathway && (\n                                <NavItem>\n                                    <NavLink\n                                        aria-selected={selectedNav === 2}\n                                        className={classNames(\n                                            \"mb-sm-3 mb-md-0\",\n                                            {\n                                                active: selectedNav === 2,\n                                            }\n                                        )}\n                                        onClick={changeSelectedNav(2)}\n                                        href=\"#\"\n                                        role=\"tab\"\n                                    >\n                                        Nodes Table\n                                    </NavLink>\n                                </NavItem>\n                            )}\n                            <NavItem>\n                                <NavLink\n                                    aria-selected={selectedNav === 3}\n                                    className={classNames(\"mb-sm-3 mb-md-0\", {\n                                        active: selectedNav === 3,\n                                    })}\n                                    onClick={changeSelectedNav(3)}\n                                    href=\"#\"\n                                    role=\"tab\"\n                                >\n                                    Heatmaps\n                                </NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink\n                                    aria-selected={selectedNav === 4}\n                                    className={classNames(\"mb-sm-3 mb-md-0\", {\n                                        active: selectedNav === 4,\n                                    })}\n                                    onClick={changeSelectedNav(4)}\n                                    href=\"#\"\n                                    role=\"tab\"\n                                >\n                                    Correlation\n                                </NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Col>\n                </Row>\n                {selectedNav === 1 && (\n                    <Card className=\"shadow\">\n                        <CardBody>\n                            <PathwaysTableEditor\n                                simulation={simulation.id}\n                                canEditPages={canEditPages}\n                                onView={(pathway) => {\n                                    setCurrentPathway(pathway);\n                                    setSelectedNav(2);\n                                }}\n                                onSelect={onSelectPathway}\n                            />\n                        </CardBody>\n                    </Card>\n                )}\n                {selectedNav === 2 && (\n                    <>\n                        <Card className=\"shadow mb-2\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase ls-1 mb-1\">\n                                    Pathway Image\n                                </h6>\n                            </CardHeader>\n                            <CardBody>\n                                <PathwayImageEditor\n                                    simulation={simulation.id}\n                                    pathway={currentPathway}\n                                    canEditPages={canEditPages}\n                                    pathwaysToNames={pathwaysToNames}\n                                />\n                            </CardBody>\n                        </Card>\n                        <Card className=\"shadow\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase ls-1 mb-1\">\n                                    Details\n                                </h6>\n                            </CardHeader>\n                            <CardBody>\n                                <NodesTableEditor\n                                    simulation={simulation.id}\n                                    pathway={currentPathway}\n                                    canEditPages={canEditPages}\n                                    onSelect={onSelectNode}\n                                />\n                            </CardBody>\n                        </Card>\n                    </>\n                )}\n                {selectedNav === 3 && (\n                    <Card className=\"shadow\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase ls-1 mb-1\">\n                                Pathway/Nodes heatmap\n                            </h6>\n                        </CardHeader>\n                        <CardBody>\n                            <SimulationHeatmapEditor\n                                simulation={simulation.id}\n                                canEditPages={canEditPages}\n                                selectedPathways={selectedPathways}\n                                selectedNodes={selectedNodes}\n                            />\n                        </CardBody>\n                    </Card>\n                )}\n                {selectedNav === 4 && (\n                    <>\n                        <Card className=\"shadow\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase ls-1 mb-1\">\n                                    Correlation graph\n                                </h6>\n                            </CardHeader>\n                            <CardBody>\n                                <CorrelationGraphEditor\n                                    simulation={simulation.id}\n                                    canEditPages={canEditPages}\n                                    onIdChange={setCorrelationGraphId}\n                                />\n                            </CardBody>\n                        </Card>\n                        <Card className=\"shadow\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase ls-1 mb-1\">\n                                    Correlation details\n                                </h6>\n                            </CardHeader>\n                            <CardBody>\n                                <PartialCorrelationGraphEditor\n                                    simulation={simulation.id}\n                                    canEditPages={canEditPages}\n                                    correlationGraphId={correlationGraphId}\n                                />\n                            </CardBody>\n                        </Card>\n                    </>\n                )}\n            </Container>\n        </>\n    );\n};\n\nexport default Index;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport { Alert } from \"reactstrap\";\nimport Plot from \"react-plotly.js\";\nimport { useDispatcher } from \"../../../Contexts/DispatcherProvider\";\n\nexport interface SelectedSimulation {\n    sender: string;\n    compareWith: number;\n    fn?: \"pearson\" | \"spearman\";\n    useEndpoints: boolean;\n    usePerturbation: boolean;\n}\n\ninterface Props {\n    id?: string;\n    simulation: number;\n    fn?: \"pearson\" | \"spearman\";\n    top?: boolean;\n    n?: number;\n    direction?: \"positive\" | \"negative\";\n    useEndpoints?: boolean;\n    usePerturbation?: boolean;\n    findByTags: string[];\n    searchMode?: \"all\" | \"any\";\n    title?: string;\n    height?: number;\n}\n\ntype CustomData = [number, \"pearson\" | \"spearman\", number, number];\n\ninterface Data {\n    x: string[];\n    y: number[];\n    customdata: CustomData[];\n}\n\ninterface State {\n    data?: Data;\n    error?: boolean;\n    message?: string;\n}\n\nconst CorrelationGraph: React.FC<Props> = ({\n    id,\n    simulation,\n    title,\n    height = 600,\n    fn = \"pearson\",\n    top = false,\n    n = 10,\n    direction = \"negative\",\n    useEndpoints = true,\n    usePerturbation = false,\n    findByTags,\n    searchMode = \"all\",\n}: Props) => {\n    const [state, setState] = useState<State>({});\n    const dispatcher = useDispatcher();\n\n    const { data, error, message } = state;\n\n    useEffect(() => {\n        setState({});\n        if (findByTags && findByTags.length > 0) {\n            axios\n                .post<Data>(\n                    route(\"simulations.plugins.correlation\", simulation),\n                    {\n                        fn,\n                        top,\n                        n,\n                        direction,\n                        useEndpoints,\n                        usePerturbation,\n                        findByTags,\n                        searchMode,\n                    }\n                )\n                .then(({ data }) => {\n                    setState({ data });\n                })\n                .catch((e) => {\n                    setState({\n                        error: true,\n                        message: e.response.data.message ?? e.message,\n                    });\n                });\n        }\n    }, [\n        simulation,\n        fn,\n        top,\n        n,\n        direction,\n        useEndpoints,\n        usePerturbation,\n        findByTags,\n        searchMode,\n    ]);\n\n    if (!findByTags || findByTags.length === 0) {\n        return (\n            <Alert color=\"primary\">\n                <i className=\"fas fa-exclamation-circle mx-2\" />\n                You cannot view any graph until you select at lest two\n                simulations through their tags.\n            </Alert>\n        );\n    }\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    return (\n        <>\n            {!!data && (\n                <>\n                    <div className=\"d-flex flex-grow-1\">\n                        <Plot\n                            data={[\n                                {\n                                    ...data,\n                                    type: \"bar\",\n                                    marker: {\n                                        color: data.y.map((y) => (y + 1) / 2),\n                                        cmin: -1,\n                                        cmax: 1,\n                                        colorscale: [\n                                            [0, \"rgb(5,10,172)\"],\n                                            [0.35, \"rgb(106,137,247)\"],\n                                            [0.5, \"rgb(255,255,255)\"],\n                                            [0.6, \"rgb(220,170,132)\"],\n                                            [0.7, \"rgb(230,145,90)\"],\n                                            [1, \"rgb(178,10,28)\"],\n                                        ],\n                                        showscale: true,\n                                    },\n                                },\n                            ]}\n                            layout={{\n                                bargap: 0,\n                                yaxis: {\n                                    title:\n                                        fn === \"pearson\"\n                                            ? \"Pearson Correlation\"\n                                            : \"Spearman Correlation\",\n                                    range: [-1, 1],\n                                },\n                                font: { size: 12 },\n                                autosize: true,\n                                showlegend: false,\n                                title,\n                            }}\n                            config={{\n                                responsive: true,\n                            }}\n                            style={{\n                                width: \"100%\",\n                                height: `${height}px`,\n                            }}\n                            useResizeHandler\n                            onClick={(event) => {\n                                if (id && event.points.length > 0) {\n                                    const point = event.points[0];\n                                    const data =\n                                        point.customdata as unknown as CustomData;\n                                    dispatcher.dispatch<SelectedSimulation>(\n                                        \"onCorrelationGraphBarClick\",\n                                        {\n                                            sender: id,\n                                            compareWith: data[0],\n                                            fn: data[1],\n                                            useEndpoints: !!data[2],\n                                            usePerturbation: !!data[3],\n                                        }\n                                    );\n                                }\n                            }}\n                        />\n                    </div>\n                </>\n            )}\n            {!data && (\n                <Alert color=\"primary\">\n                    <i className=\"fas fa-circle-notch fa-spin mx-2\" />\n                    Building image. Please wait...\n                </Alert>\n            )}\n        </>\n    );\n};\n\nexport default CorrelationGraph;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport BootstrapTable, {\n    ColumnDescription,\n    SelectRowProps,\n    SizePerPageRendererOptions,\n    SortOrder,\n} from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport filterFactory from \"react-bootstrap-table2-filter\";\nimport ToolkitProvider, {\n    Search,\n    ToolkitContextType,\n} from \"react-bootstrap-table2-toolkit\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css\";\nimport { Alert } from \"reactstrap\";\n\ninterface Props {\n    simulation: number;\n    pathway?: string;\n    nodes?: string[];\n    sortable?: boolean;\n    filterable?: boolean;\n    enableId?: boolean;\n    defaultSorting?: { dataField: keyof Node; order: SortOrder };\n    onSelect?: (node: string) => void;\n}\n\nexport interface Node {\n    nodeId: string;\n    nodeName: string;\n    averagePerturbation: number;\n    activityScore: number;\n    pValue: number;\n    FDR: number;\n}\n\ninterface State {\n    data?: Node[];\n    error?: boolean;\n    message?: string;\n}\n\nconst { SearchBar } = Search;\n\nconst NodesTable: React.FC<Props> = ({\n    simulation,\n    pathway,\n    nodes,\n    sortable = true,\n    filterable = true,\n    enableId = false,\n    defaultSorting = {\n        dataField: \"FDR\",\n        order: \"asc\",\n    },\n    onSelect,\n}: Props) => {\n    const [state, setState] = useState<State>({\n        data: undefined,\n    });\n\n    const { data, error, message } = state;\n\n    useEffect(() => {\n        if (pathway) {\n            const filters = nodes ? { nodes } : {};\n            axios\n                .post<Record<string, Node>>(\n                    route(\"simulations.plugins.nodesTable\", simulation),\n                    { pathway, ...filters }\n                )\n                .then(({ data }) => {\n                    setState({\n                        data: Object.values(data),\n                    });\n                })\n                .catch((e) => {\n                    setState({\n                        error: true,\n                        message: e.message,\n                    });\n                });\n        }\n    }, [simulation, nodes, pathway]);\n\n    const columns: ColumnDescription[] = [\n        {\n            dataField: \"nodeName\",\n            text: \"Name\",\n            sort: sortable,\n            classes: \"text-truncate\",\n        },\n        {\n            dataField: \"activityScore\",\n            text: \"Activity Score\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) => row.activityScore.toFixed(4),\n        },\n        {\n            dataField: \"averagePerturbation\",\n            text: \"Perturbation\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) => row.averagePerturbation.toFixed(4),\n        },\n        {\n            dataField: \"pValue\",\n            text: \"p-value\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) =>\n                row.pValue < 0.0001 ? \"< 0.0001\" : row.pValue.toFixed(4),\n        },\n        {\n            dataField: \"FDR\",\n            text: \"FDR\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) =>\n                row.FDR < 0.0001 ? \"< 0.0001\" : row.FDR.toFixed(4),\n        },\n    ];\n    if (enableId) {\n        columns.unshift({\n            dataField: \"nodeId\",\n            text: \"Id\",\n            sort: sortable,\n        });\n    }\n    const selectRow: SelectRowProps<Node> | undefined = onSelect\n        ? {\n              mode: \"checkbox\",\n              clickToSelect: true,\n              hideSelectAll: true,\n              onSelect: (row) => onSelect(row.nodeId),\n          }\n        : undefined;\n\n    const pagination = useMemo(\n        () =>\n            paginationFactory({\n                alwaysShowAllBtns: true,\n                showTotal: true,\n                withFirstAndLast: false,\n                sizePerPageRenderer: ({\n                    onSizePerPageChange,\n                }: SizePerPageRendererOptions) => (\n                    <div\n                        className=\"dataTables_length\"\n                        id=\"datatable-basic_length\"\n                    >\n                        <label>\n                            Show{\" \"}\n                            {\n                                <select\n                                    name=\"datatable-basic_length\"\n                                    aria-controls=\"datatable-basic\"\n                                    className=\"form-control form-control-sm\"\n                                    onChange={(e) =>\n                                        onSizePerPageChange(+e.target.value, 1)\n                                    }\n                                >\n                                    <option value=\"10\">10</option>\n                                    <option value=\"25\">25</option>\n                                    <option value=\"50\">50</option>\n                                    <option value=\"100\">100</option>\n                                </select>\n                            }{\" \"}\n                            entries.\n                        </label>\n                    </div>\n                ),\n            }),\n        [simulation, pathway, nodes, sortable]\n    );\n\n    if (!pathway) {\n        return (\n            <Alert color=\"warning\">Select a pathway to view its nodes.</Alert>\n        );\n    }\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    return (\n        <ToolkitProvider\n            keyField=\"nodeId\"\n            data={data ?? []}\n            columns={columns}\n            search\n        >\n            {(props: ToolkitContextType) => (\n                <div className=\"py-4\">\n                    {filterable && (\n                        <div className=\"dataTables_filter px-4 pb-1\">\n                            <label>\n                                Search:\n                                <SearchBar\n                                    className=\"form-control-sm\"\n                                    placeholder=\"\"\n                                    {...props.searchProps}\n                                />\n                            </label>\n                        </div>\n                    )}\n                    <BootstrapTable\n                        {...props.baseProps}\n                        bootstrap4\n                        pagination={pagination}\n                        filter={filterFactory()}\n                        bordered={false}\n                        defaultSorted={[defaultSorting]}\n                        selectRow={selectRow}\n                    />\n                </div>\n            )}\n        </ToolkitProvider>\n    );\n};\n\nexport default NodesTable;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport { Alert } from \"reactstrap\";\nimport Plot from \"react-plotly.js\";\nimport { useDispatcherEventWithSender } from \"../../../Hooks/useDispatcherEvent\";\nimport { SelectedSimulation } from \"./CorrelationGraph\";\n\ninterface Props {\n    id?: string;\n    simulation: number;\n    compareWith?: number;\n    fn?: \"pearson\" | \"spearman\";\n    top?: boolean;\n    n?: number;\n    direction?: \"positive\" | \"negative\" | \"both\";\n    useEndpoints?: boolean;\n    usePerturbation?: boolean;\n    title?: string;\n    height?: number;\n    connectedTo?: string;\n}\n\ninterface Data {\n    x: string[];\n    y: number[];\n}\n\ninterface State {\n    data?: Data;\n    error?: boolean;\n    message?: string;\n}\n\ninterface SelectionState {\n    compareWith?: number;\n    fn?: \"pearson\" | \"spearman\";\n    useEndpoints?: boolean;\n    usePerturbation?: boolean;\n}\n\nconst PartialCorrelationGraph: React.FC<Props> = ({\n    simulation,\n    title,\n    height = 600,\n    top = false,\n    n = 10,\n    direction = \"negative\",\n    connectedTo,\n    ...selectionProps\n}: Props) => {\n    const [state, setState] = useState<State>({});\n    const [selectionState, setSelectionState] = useState<SelectionState>({\n        compareWith: selectionProps.compareWith,\n        fn: selectionProps.fn,\n        useEndpoints: selectionProps.useEndpoints,\n        usePerturbation: selectionProps.useEndpoints,\n    });\n\n    const { data, error, message } = state;\n    const { compareWith, fn, useEndpoints, usePerturbation } = selectionState;\n\n    useEffect(() => {\n        setState({});\n        if (compareWith && compareWith > 0) {\n            axios\n                .post<Data>(\n                    route(\"simulations.plugins.partialCorrelation\", simulation),\n                    {\n                        compareWith,\n                        fn,\n                        top,\n                        n,\n                        direction,\n                        useEndpoints,\n                        usePerturbation,\n                    }\n                )\n                .then(({ data }) => {\n                    setState({ data });\n                })\n                .catch((e) => {\n                    setState({\n                        error: true,\n                        message: e.response.data.message ?? e.message,\n                    });\n                });\n        }\n    }, [\n        simulation,\n        compareWith,\n        fn,\n        top,\n        n,\n        direction,\n        useEndpoints,\n        usePerturbation,\n    ]);\n\n    useDispatcherEventWithSender<SelectedSimulation>(\n        \"onCorrelationGraphBarClick\",\n        (selection) => {\n            setSelectionState((prevState) => ({\n                ...prevState,\n                ...selection,\n            }));\n        },\n        connectedTo,\n        [setSelectionState]\n    );\n\n    if (!compareWith || compareWith < 0) {\n        return (\n            <Alert color=\"primary\">\n                <i className=\"fas fa-exclamation-circle mx-2\" />\n                Click on a bar in the correlation graph to display its details.\n            </Alert>\n        );\n    }\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    const min = data ? Math.min(...data.y) : 0;\n    const max = data ? Math.max(...data.y) : 0;\n    const range = Math.max(Math.abs(min), Math.abs(max));\n    const cmin = -range;\n    // const cdiff = data ? cmax - cmin : 0;\n\n    return (\n        <>\n            {!!data && (\n                <>\n                    <div className=\"d-flex flex-grow-1\">\n                        <Plot\n                            data={[\n                                {\n                                    ...data,\n                                    type: \"bar\",\n                                    marker: {\n                                        color: data.y,\n                                        cmin: cmin,\n                                        cmax: range,\n                                        colorscale: [\n                                            [0, \"rgb(5,10,172)\"],\n                                            [0.35, \"rgb(106,137,247)\"],\n                                            [0.5, \"rgb(255,255,255)\"],\n                                            [0.6, \"rgb(220,170,132)\"],\n                                            [0.7, \"rgb(230,145,90)\"],\n                                            [1, \"rgb(178,10,28)\"],\n                                        ],\n                                        showscale: true,\n                                    },\n                                },\n                            ]}\n                            layout={{\n                                bargap: 0,\n                                yaxis: {\n                                    title:\n                                        fn === \"pearson\"\n                                            ? \"Pearson Correlation\"\n                                            : \"Spearman Correlation\",\n                                    // range: [-1, 1],\n                                },\n                                font: { size: 12 },\n                                autosize: true,\n                                showlegend: false,\n                                title,\n                            }}\n                            config={{\n                                responsive: true,\n                            }}\n                            style={{\n                                width: \"100%\",\n                                height: `${height}px`,\n                            }}\n                            useResizeHandler\n                        />\n                    </div>\n                </>\n            )}\n            {!data && (\n                <Alert color=\"primary\">\n                    <i className=\"fas fa-circle-notch fa-spin mx-2\" />\n                    Building image. Please wait...\n                </Alert>\n            )}\n        </>\n    );\n};\n\nexport default PartialCorrelationGraph;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport { Alert, Button, Modal } from \"reactstrap\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    simulation: number;\n    pathway?: string;\n    legend?: string;\n    position?: \"left\" | \"center\" | \"right\";\n}\n\ninterface State {\n    data?: string;\n    error?: boolean;\n    message?: string;\n}\n\nconst PathwayImage: React.FC<Props> = ({\n    simulation,\n    pathway,\n    position = \"center\",\n    legend,\n}: Props) => {\n    const [state, setState] = useState<State>({});\n    const [shown, setShown] = useState(false);\n\n    const { data, error, message } = state;\n\n    useEffect(() => {\n        if (pathway) {\n            axios\n                .post<{ data: string }>(\n                    route(\"simulations.plugins.pathwayImage\", simulation),\n                    { pathway }\n                )\n                .then(({ data }) => {\n                    setState(data);\n                })\n                .catch((e) => {\n                    setState({\n                        error: true,\n                        message: e.response.data.message ?? e.message,\n                    });\n                });\n        }\n    }, [simulation, pathway]);\n\n    const toggleModal = () => setShown((prevState) => !prevState);\n\n    if (!pathway) {\n        return (\n            <Alert color=\"warning\">Select a pathway to view its image.</Alert>\n        );\n    }\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    return (\n        <>\n            {!!data && (\n                <>\n                    {[\"left\", \"right\"].includes(position) && (\n                        <div\n                            className={classNames({\n                                figure: true,\n                                fig_left: position === \"left\",\n                                fig_right: position === \"right\",\n                            })}\n                        >\n                            <div className=\"fig_container\">\n                                <a\n                                    href=\"#\"\n                                    className=\"fig\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        setShown(true);\n                                    }}\n                                >\n                                    <img src={data} alt={pathway} />\n                                </a>\n                                <div className=\"fig_caption\">{legend}</div>\n                            </div>\n                        </div>\n                    )}\n                    {position === \"center\" && (\n                        <div className=\"d-flex justify-content-center\">\n                            <div className=\"figure\" style={{ width: \"50%\" }}>\n                                <div className=\"fig_container\">\n                                    <a\n                                        href=\"#\"\n                                        className=\"fig\"\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            setShown(true);\n                                        }}\n                                    >\n                                        <img\n                                            src={data}\n                                            alt={pathway}\n                                            className=\"centered\"\n                                        />\n                                    </a>\n                                    <div className=\"fig_caption\">{legend}</div>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    <Modal\n                        className=\"modal-dialog-centered\"\n                        isOpen={shown}\n                        toggle={() => toggleModal()}\n                        style={{\n                            maxWidth: \"100vw\",\n                        }}\n                    >\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n                                {legend}\n                            </h5>\n                            <button\n                                aria-label=\"Close\"\n                                className=\"close\"\n                                data-dismiss=\"modal\"\n                                type=\"button\"\n                                onClick={() => toggleModal()}\n                            >\n                                <span aria-hidden={true}>×</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body\">\n                            <img\n                                src={data}\n                                alt={pathway}\n                                style={{ width: \"100%\" }}\n                            />\n                        </div>\n                        <div className=\"modal-footer\">\n                            <Button\n                                color=\"primary\"\n                                data-dismiss=\"modal\"\n                                type=\"button\"\n                                onClick={() => toggleModal()}\n                            >\n                                Close\n                            </Button>\n                        </div>\n                    </Modal>\n                </>\n            )}\n            {!data && (\n                <Alert color=\"primary\">\n                    <i className=\"fas fa-circle-notch fa-spin mx-2\" />\n                    Building image. Please wait...\n                </Alert>\n            )}\n        </>\n    );\n};\n\nexport default PathwayImage;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport BootstrapTable, {\n    ColumnDescription,\n    SelectRowProps,\n    SizePerPageRendererOptions,\n    SortOrder,\n} from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport filterFactory from \"react-bootstrap-table2-filter\";\nimport ToolkitProvider, {\n    Search,\n    ToolkitContextType,\n} from \"react-bootstrap-table2-toolkit\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css\";\n\ninterface Props {\n    simulation: number;\n    pathways?: string[];\n    sortable?: boolean;\n    filterable?: boolean;\n    enableId?: boolean;\n    defaultSorting?: { dataField: keyof Pathway; order: SortOrder };\n    onSelect?: (pathway: string) => void;\n    onView?: (pathway: string) => void;\n}\n\nexport interface Pathway {\n    pathwayId: string;\n    pathwayName: string;\n    averagePathwayPerturbation: number;\n    pathwayActivityScore: number;\n    pathwayPValue: number;\n    pathwayFDR: number;\n}\n\ninterface State {\n    data?: Pathway[];\n    error?: boolean;\n    message?: string;\n}\n\nconst { SearchBar } = Search;\n\nconst PathwaysTable: React.FC<Props> = ({\n    simulation,\n    pathways,\n    sortable = true,\n    filterable = true,\n    enableId = false,\n    defaultSorting = {\n        dataField: \"pathwayFDR\",\n        order: \"asc\",\n    },\n    onSelect,\n    onView,\n}: Props) => {\n    const [state, setState] = useState<State>({\n        data: undefined,\n    });\n\n    const { data, error, message } = state;\n\n    useEffect(() => {\n        const filters = pathways ? { pathways } : {};\n        axios\n            .post<Record<string, Pathway>>(\n                route(\"simulations.plugins.pathwaysTable\", simulation),\n                filters\n            )\n            .then(({ data }) => {\n                setState({\n                    data: Object.values(data),\n                });\n            })\n            .catch((e) => {\n                setState({\n                    error: true,\n                    message: e.message,\n                });\n            });\n    }, [simulation, pathways]);\n\n    const columns: ColumnDescription[] = [\n        {\n            dataField: \"pathwayName\",\n            text: \"Name\",\n            sort: sortable,\n            classes: \"text-truncate\",\n        },\n        {\n            dataField: \"pathwayActivityScore\",\n            text: \"Activity Score\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) => row.pathwayActivityScore.toFixed(4),\n        },\n        {\n            dataField: \"averagePathwayPerturbation\",\n            text: \"Perturbation\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) => row.averagePathwayPerturbation.toFixed(4),\n        },\n        {\n            dataField: \"pathwayPValue\",\n            text: \"p-value\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) =>\n                row.pathwayPValue < 0.0001\n                    ? \"< 0.0001\"\n                    : row.pathwayPValue.toFixed(4),\n        },\n        {\n            dataField: \"pathwayFDR\",\n            text: \"FDR\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) =>\n                row.pathwayPValue < 0.0001\n                    ? \"< 0.0001\"\n                    : row.pathwayFDR.toFixed(4),\n        },\n    ];\n    if (enableId) {\n        columns.unshift({\n            dataField: \"pathwayId\",\n            text: \"Id\",\n            sort: sortable,\n        });\n    }\n    if (onView) {\n        columns.push({\n            dataField: \"view\",\n            isDummyField: true,\n            text: \"\",\n            headerStyle: {\n                width: \"60px\",\n            },\n            formatter: (_, row) => (\n                <a\n                    className=\"btn btn-sm btn-link\"\n                    href=\"#\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        onView(row.pathwayId);\n                    }}\n                >\n                    <i className=\"fas fa-eye fa-fw\" />\n                </a>\n            ),\n        });\n    }\n    const selectRow: SelectRowProps<Pathway> | undefined = onSelect\n        ? {\n              mode: \"checkbox\",\n              clickToSelect: true,\n              hideSelectAll: true,\n              onSelect: (row) => onSelect(row.pathwayId),\n          }\n        : undefined;\n\n    const pagination = useMemo(\n        () =>\n            paginationFactory({\n                alwaysShowAllBtns: true,\n                showTotal: true,\n                withFirstAndLast: false,\n                sizePerPageRenderer: ({\n                    onSizePerPageChange,\n                }: SizePerPageRendererOptions) => (\n                    <div\n                        className=\"dataTables_length\"\n                        id=\"datatable-basic_length\"\n                    >\n                        <label>\n                            Show{\" \"}\n                            {\n                                <select\n                                    name=\"datatable-basic_length\"\n                                    aria-controls=\"datatable-basic\"\n                                    className=\"form-control form-control-sm\"\n                                    onChange={(e) =>\n                                        onSizePerPageChange(+e.target.value, 1)\n                                    }\n                                >\n                                    <option value=\"10\">10</option>\n                                    <option value=\"25\">25</option>\n                                    <option value=\"50\">50</option>\n                                    <option value=\"100\">100</option>\n                                </select>\n                            }{\" \"}\n                            entries.\n                        </label>\n                    </div>\n                ),\n            }),\n        [simulation, pathways, sortable]\n    );\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    return (\n        <ToolkitProvider\n            keyField=\"pathwayId\"\n            data={data ?? []}\n            columns={columns}\n            search\n        >\n            {(props: ToolkitContextType) => (\n                <div className=\"py-4\">\n                    {filterable && (\n                        <div className=\"dataTables_filter px-4 pb-1\">\n                            <label>\n                                Search:\n                                <SearchBar\n                                    className=\"form-control-sm\"\n                                    placeholder=\"\"\n                                    {...props.searchProps}\n                                />\n                            </label>\n                        </div>\n                    )}\n                    <BootstrapTable\n                        {...props.baseProps}\n                        bootstrap4\n                        pagination={pagination}\n                        filter={filterFactory()}\n                        bordered={false}\n                        defaultSorted={[defaultSorting]}\n                        selectRow={selectRow}\n                    />\n                </div>\n            )}\n        </ToolkitProvider>\n    );\n};\n\nexport default PathwaysTable;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport { Alert } from \"reactstrap\";\nimport Plot from \"react-plotly.js\";\n\ninterface Props {\n    simulation: number;\n    type?: \"pathways\" | \"nodes\";\n    mode?: \"top\" | \"selected\";\n    selection?: string[];\n    sortBy?: \"perturbation\" | \"activity\";\n    n?: number;\n    absolute?: boolean;\n    limit?: \"none\" | \"positive\" | \"negative\";\n    attach?: {\n        tags?: string[];\n        mode?: \"all\" | \"any\";\n        simulations?: string[];\n    };\n    title?: string;\n    height?: number;\n}\n\ninterface Data {\n    x: string[];\n    y: string[];\n    z: number[][];\n}\n\ninterface State {\n    data?: Data;\n    error?: boolean;\n    message?: string;\n}\n\nconst SimulationHeatmap: React.FC<Props> = ({\n    simulation,\n    title,\n    height = 600,\n    type = \"pathways\",\n    mode = \"top\",\n    selection,\n    sortBy = \"perturbation\",\n    n = 10,\n    absolute = false,\n    limit = \"none\",\n    attach = {},\n}: Props) => {\n    const [state, setState] = useState<State>({});\n\n    const { data, error, message } = state;\n\n    useEffect(() => {\n        axios\n            .post<Data>(route(\"simulations.plugins.heatmap\", simulation), {\n                type,\n                mode,\n                selection,\n                sort_by: sortBy,\n                n,\n                absolute,\n                limit,\n                attach,\n            })\n            .then(({ data }) => {\n                setState({ data });\n            })\n            .catch((e) => {\n                setState({\n                    error: true,\n                    message: e.response.data.message ?? e.message,\n                });\n            });\n    }, [simulation, type, mode, selection, sortBy, n, absolute, limit, attach]);\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    return (\n        <>\n            {!!data && (\n                <>\n                    <div className=\"d-flex flex-grow-1\">\n                        <Plot\n                            data={[\n                                {\n                                    ...data,\n                                    type: \"heatmap\",\n                                    colorscale: [\n                                        [0, \"rgb(5,10,172)\"],\n                                        [0.35, \"rgb(106,137,247)\"],\n                                        [0.5, \"rgb(255,255,255)\"],\n                                        [0.6, \"rgb(220,170,132)\"],\n                                        [0.7, \"rgb(230,145,90)\"],\n                                        [1, \"rgb(178,10,28)\"],\n                                    ],\n                                },\n                            ]}\n                            layout={{\n                                font: { size: 12 },\n                                autosize: true,\n                                title,\n                            }}\n                            config={{\n                                responsive: true,\n                            }}\n                            style={{\n                                width: \"100%\",\n                                height: `${height}px`,\n                            }}\n                            useResizeHandler\n                        />\n                    </div>\n                </>\n            )}\n            {!data && (\n                <Alert color=\"primary\">\n                    <i className=\"fas fa-circle-notch fa-spin mx-2\" />\n                    Building image. Please wait...\n                </Alert>\n            )}\n        </>\n    );\n};\n\nexport default SimulationHeatmap;\n"],"sourceRoot":""}