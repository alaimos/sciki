{"version":3,"sources":["webpack:///./resources/js/Hooks/useDispatcherEvent.ts","webpack:///./resources/js/Common/utils.ts","webpack:///./resources/js/Modules/Simulations/Components/PartialCorrelationGraphEditor.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/PartialCorrelationGraph.tsx"],"names":["useDispatcherEventWithSender","eventName","callback","connectTo","deps","dispatcher","useEffect","on","off","useDispatcherEvent","data","sender","includes","filterByKey","raw","Object","keys","filter","k","reduce","obj","key","simulation","canEditPages","correlationGraphId","useState","pluginCode","setPluginCode","connected","setConnected","plugin","id","Math","random","toString","substr","fn","top","n","direction","useEndpoints","usePerturbation","title","height","state","setState","selection","prevState","tmpState","JSON","stringify","undefined","Row","Col","xs","xl","PartialCorrelationGraph","connectedTo","className","Card","CardHeader","CardBody","FormGroup","Label","for","Input","type","value","onChange","e","target","checked","htmlFor","CopyToClipboard","text","Button","UncontrolledTooltip","delay","trigger","style","maxHeight","overflowX","selectionProps","compareWith","selectionState","setSelectionState","error","message","then","response","color","min","y","max","range","abs","cmin","marker","cmax","colorscale","showscale","layout","bargap","yaxis","font","size","autosize","showlegend","config","responsive","width","useResizeHandler"],"mappings":"qNAwBM,SAAUA,EACZC,EACAC,EACAC,EACAC,IArBU,SACVH,EACAC,EACAE,GAEA,IAAMC,GAAa,UACnB,IAAAC,YACI,WAEI,OADAD,EAAWE,GAAGN,EAAWC,GAClB,WACHG,EAAWG,IAAIP,EAAWC,MAGlCE,EAAM,OAAKA,GAAI,CAAEF,IAAYE,GAUjCK,CACIR,GACA,SAACS,GACW,IAAAC,EAAWD,EAAL,OAEVP,IACuB,iBAAdA,GAA0BQ,IAAWR,GAC1CA,EAAUS,SAASD,KAEvBT,EAASQ,KAGjBN,EAAM,OAAKA,GAAI,CAAEF,EAAUC,IAAaC,K,gZC1C1C,SAAUS,EACZC,EACAZ,GAEA,OAAOa,OAAOC,KAAKF,GACdG,QAAO,SAACC,GAAM,OAAAhB,EAAA,MACdiB,QAAO,SAACC,EAAKC,G,MACV,cACOD,KAAG,MACLC,GAAMP,EAAIO,GAAe,MAE/B,I,yOC6QX,QA3OgD,SAAC,G,IAC7CC,EAAU,aACVC,EAAY,eACZC,EAAkB,qBAEZ,GAA8B,IAAAC,UAAS,IAAtCC,EAAU,KAAEC,EAAa,KAC1B,GAA4B,IAAAF,WAAS,GAApCG,EAAS,KAAEC,EAAY,KACxB,GAAoB,IAAAJ,UAAgB,CACtCK,OAAQ,uCACRC,GAAI,sBAAsBC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAC/Db,WAAYA,EACZc,GAAI,UACJC,KAAK,EACLC,EAAG,GACHC,UAAW,WACXC,cAAc,EACdC,iBAAiB,EACjBC,MAAO,GACPC,OAAQ,MAXLC,EAAK,KAAEC,EAAQ,KA8CtB,OAhCA,EAAApC,EAAA,GACI,8BACA,SAACqC,GACGD,GAAS,SAACE,GAAc,SAAC,KAClBA,GACAlC,EAAYiC,GAAW,SAAC5B,GAAM,iBAAAA,WAGzCM,EACA,CAACqB,KAGL,IAAAvC,YAAU,WACN,IAAM0C,EAAWnC,EACb+B,GACA,SAAC1B,GACG,OAACU,IACA,CACG,cACA,KACA,eACA,mBACFhB,SAASM,MAEfU,IACAoB,EAAQ,YAAkBxB,GAE9BG,EAAc,aACpBsB,KAAKC,UAAUF,OAAUG,EAAW,GAAE,WAEjC,CAACxB,EAAeL,EAAYsB,EAAOhB,EAAWJ,IAG7C,gCACI,gBAAC4B,EAAA,EAAG,KACA,gBAACC,EAAA,EAAG,CAACC,GAAG,KAAKC,GAAG,KACZ,gBAACC,EAAA,QAAuB,KAChBZ,EAAK,CACTa,YAAajC,MAGrB,gBAAC6B,EAAA,EAAG,CAACC,GAAG,KAAKC,GAAG,IAAIG,UAAU,sBAC1B,gBAACC,EAAA,EAAI,CAACD,UAAU,4CACZ,gBAACE,EAAA,EAAU,CAACF,UAAU,kBAClB,sBAAIA,UAAU,uCAAqC,sBAIvD,gBAACG,EAAA,EAAQ,CAACH,UAAU,iBAChB,gBAACI,EAAA,EAAS,KACN,gBAACC,EAAA,EAAK,CAACC,IAAI,qBAAmB,SAC9B,gBAACC,EAAA,EAAK,CACFlC,GAAG,oBACHmC,KAAK,OACLC,MAAOvB,EAAMF,MACb0B,SAAU,SAACC,GACP,OAAAxB,GAAS,SAACE,GAAc,SAAC,KAClBA,GAAS,CACZL,MAAO2B,EAAEC,OAFW,eAOpC,gBAACR,EAAA,EAAS,KACN,gBAACC,EAAA,EAAK,CAACC,IAAI,sBAAoB,UAC/B,gBAACC,EAAA,EAAK,CACFlC,GAAG,qBACHmC,KAAK,SACLC,MAAOvB,EAAMD,OACbyB,SAAU,SAACC,GACP,OAAAxB,GAAS,SAACE,GAAc,SAAC,KAClBA,GAAS,CACZJ,QAAS0B,EAAEC,OAFS,eAOpC,uBAAKZ,UAAU,uCACX,yBACIA,UAAU,uBACV3B,GAAG,qBACHwC,QAAS3C,EACTsC,KAAK,WACLE,SAAU,SAACC,GACP,OAAAxC,EAAawC,EAAEC,OAAOC,YAG9B,yBACIb,UAAU,uBACVc,QAAQ,sBAEP,kCACGjD,EACM,2OAIA,MAIlB,uBAAKmC,UAAU,uCACX,yBACIA,UAAU,uBACV3B,GAAG,oBACHwC,QAAS3B,EAAMP,IACf6B,KAAK,WACLE,SAAU,SAACC,GACP,OAAAxB,GAAS,SAACE,GAAc,SAAC,KAClBA,GAAS,CACZV,IAAKgC,EAAEC,OAFa,gBAMhC,yBACIZ,UAAU,uBACVc,QAAQ,qBAAmB,iCAKlC5B,EAAMP,KACH,gCACI,gBAACyB,EAAA,EAAS,KACN,gBAACC,EAAA,EAAK,CAACC,IAAI,sBAAoB,yBAG/B,gBAACC,EAAA,EAAK,CACFlC,GAAG,qBACHmC,KAAK,SACLC,MAAOvB,EAAMN,EACb8B,SAAU,SAACC,GACP,OAAAxB,GAAS,SAACE,GAAc,SAAC,KAClBA,GAAS,CACZT,GAAI+B,EAAEC,OAFc,eAOpC,gBAACR,EAAA,EAAS,KACN,gBAACC,EAAA,EAAK,CAACC,IAAI,yBAAuB,aAGlC,gBAACC,EAAA,EAAK,CACFlC,GAAG,wBACHmC,KAAK,SACLC,MAAOvB,EAAML,UACb6B,SAAU,SAACC,GACP,OAAAxB,GAAS,SAACE,GAAc,SAAC,KAClBA,GAAS,CACZR,UAAW8B,EAAEC,OAFO,aAO5B,0BAAQH,MAAM,QAAM,QACpB,0BAAQA,MAAM,YAAU,kBAGxB,0BAAQA,MAAM,YAAU,uBAS/C5C,GACG,gBAACoC,EAAA,EAAI,CAACD,UAAU,uCACZ,gBAACE,EAAA,EAAU,CAACF,UAAU,kBAClB,uBAAKA,UAAU,8DACX,sBAAIA,UAAU,uCAAqC,gBAGnD,gBAAC,EAAAe,gBAAe,CAACC,KAAMhD,GACnB,gBAACiD,EAAA,EAAM,CACHjB,UAAU,sBACV3B,GAAG,mBACHmC,KAAK,UAEL,qBAAGR,UAAU,uBAGrB,gBAACkB,EAAA,EAAmB,CAChBC,MAAO,EACPC,QAAQ,cACRR,OAAO,oBAAkB,uBAMrC,gBAACT,EAAA,EAAQ,KACL,wBAAMH,UAAU,aACZ,uBACIA,UAAU,gBACVqB,MAAO,CACHC,UAAW,QACXC,UAAW,SAGdvD,W,6qBC5EzC,QAvJiD,SAAC,GAC9C,IAAAJ,EAAU,aACVoB,EAAK,QACL,IAAAC,cAAM,IAAG,MAAG,EACZ,IAAAN,WAAG,IAAG,GAAK,EACX,IAAAC,SAAC,IAAG,KAAE,EACN,IAAAC,iBAAS,IAAG,aAAU,EACtBkB,EAAW,cACRyB,EAAc,IAR6B,qEAUxC,GAAoB,IAAAzD,UAAgB,IAAnCmB,EAAK,KAAEC,EAAQ,KAChB,GAAsC,IAAApB,UAAyB,CACjE0D,YAAaD,EAAeC,YAC5B/C,GAAI8C,EAAe9C,GACnBI,aAAc0C,EAAe1C,aAC7BC,gBAAiByC,EAAe1C,eAJ7B4C,EAAc,KAAEC,EAAiB,KAOhC3E,EAAyBkC,EAArB,KAAE0C,EAAmB1C,EAAd,MAAE2C,EAAY3C,EAAL,QACpBuC,EAAmDC,EAAxC,YAAEhD,EAAsCgD,EAApC,GAAE5C,EAAkC4C,EAAtB,aAAE3C,EAAoB2C,EAAL,gBAmDtD,IAjDA,IAAA9E,YAAU,WACNuC,EAAS,IACLsC,GAAeA,EAAc,GAC7B,SAEQ,IAAM,yCAA0C7D,GAChD,CACI6D,YAAW,EACX/C,GAAE,EACFC,IAAG,EACHC,EAAC,EACDC,UAAS,EACTC,aAAY,EACZC,gBAAe,IAGtB+C,MAAK,SAAC,G,IAAE9E,EAAI,OACTmC,EAAS,CAAEnC,KAAI,OAdvB,OAgBW,SAAC2D,G,MACJxB,EAAS,CACLyC,OAAO,EACPC,QAAgC,QAAvB,EAAAlB,EAAEoB,SAAS/E,KAAK6E,eAAO,QAAIlB,EAAEkB,eAIvD,CACCjE,EACA6D,EACA/C,EACAC,EACAC,EACAC,EACAC,EACAC,KAGJ,OACI,8BACA,SAACK,GACGuC,GAAkB,SAACtC,GAAc,cAC1BA,GAD0B,QAKrCU,EACA,CAAC4B,KAGAF,GAAeA,EAAc,EAC9B,OACI,gBAAC,IAAK,CAACO,MAAM,WACT,qBAAGhC,UAAU,mCAET,mEAIhB,GAAI4B,EACA,OAAO,qBAAG5B,UAAU,YAAY6B,GAGpC,IAAMI,EAAMjF,EAAOsB,KAAK2D,IAAG,MAAR3D,KAAYtB,EAAKkF,GAAK,EACnCC,EAAMnF,EAAOsB,KAAK6D,IAAG,MAAR7D,KAAYtB,EAAKkF,GAAK,EACnCE,EAAQ9D,KAAK6D,IAAI7D,KAAK+D,IAAIJ,GAAM3D,KAAK+D,IAAIF,IACzCG,GAAQF,EAGd,OACI,kCACOpF,GACC,gCACI,uBAAKgD,UAAU,sBACX,gBAAC,IAAI,CACDhD,KAAM,C,OAEKA,GAAI,CACPwD,KAAM,MACN+B,OAAQ,CACJP,MAAOhF,EAAKkF,EACZI,KAAMA,EACNE,KAAMJ,EACNK,WAAY,CACR,CAAC,EAAG,iBACJ,CAAC,IAAM,oBACP,CAAC,GAAK,oBACN,CAAC,GAAK,oBACN,CAAC,GAAK,mBACN,CAAC,EAAG,mBAERC,WAAW,MAIvBC,OAAQ,CACJC,OAAQ,EACRC,MAAO,CACH7D,MACW,YAAPN,EACM,sBACA,wBAGdoE,KAAM,CAAEC,KAAM,IACdC,UAAU,EACVC,YAAY,EACZjE,MAAK,GAETkE,OAAQ,CACJC,YAAY,GAEhB9B,MAAO,CACH+B,MAAO,OACPnE,OAAWA,EAAM,MAErBoE,kBAAgB,OAK9BrG,GACE,gBAAC,IAAK,CAACgF,MAAM,WACT,qBAAGhC,UAAU,qCAET","file":"js/928.js?id=0b31a46d3982c820d92b","sourcesContent":["import { DependencyList, useEffect } from \"react\";\nimport { useDispatcher } from \"../Contexts/DispatcherProvider\";\n\ninterface Identifiable {\n    sender: string;\n}\n\nexport default function useDispatcherEvent<T>(\n    eventName: string,\n    callback: (data: T) => void,\n    deps?: DependencyList\n): void {\n    const dispatcher = useDispatcher();\n    useEffect(\n        () => {\n            dispatcher.on(eventName, callback);\n            return () => {\n                dispatcher.off(eventName, callback);\n            };\n        },\n        deps ? [...deps, callback] : deps\n    );\n}\n\nexport function useDispatcherEventWithSender<T extends Identifiable>(\n    eventName: string,\n    callback: (data: T) => void,\n    connectTo?: string | string[],\n    deps?: DependencyList\n): void {\n    useDispatcherEvent<T>(\n        eventName,\n        (data) => {\n            const { sender } = data;\n            if (\n                connectTo &&\n                ((typeof connectTo === \"string\" && sender === connectTo) ||\n                    connectTo.includes(sender))\n            ) {\n                callback(data);\n            }\n        },\n        deps ? [...deps, callback, connectTo] : deps\n    );\n}\n","export function filterByKey<T>(\n    raw: T,\n    callback: (k: keyof T) => boolean\n): Partial<T> {\n    return Object.keys(raw)\n        .filter((k) => callback(k as keyof T))\n        .reduce((obj, key) => {\n            return {\n                ...obj,\n                [key]: raw[key as keyof T],\n            };\n        }, {}) as unknown as Partial<T>;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { filterByKey } from \"../../../Common/utils\";\nimport PartialCorrelationGraph from \"../WikiPlugins/PartialCorrelationGraph\";\nimport { useDispatcherEventWithSender } from \"../../../Hooks/useDispatcherEvent\";\nimport { SelectedSimulation } from \"../WikiPlugins/CorrelationGraph\";\n\ninterface Props {\n    simulation: number;\n    canEditPages: boolean;\n    correlationGraphId?: string;\n}\n\ntype Correlation = \"pearson\" | \"spearman\";\ntype Direction = \"positive\" | \"negative\" | \"both\";\n\ninterface State {\n    plugin: \"@Simulations:PartialCorrelationGraph\";\n    id?: string;\n    simulation: number;\n    compareWith?: number;\n    fn: Correlation;\n    top: boolean;\n    n: number;\n    direction: Direction;\n    useEndpoints: boolean;\n    usePerturbation: boolean;\n    title: string;\n    height: number;\n    connectedTo?: string;\n}\n\nconst CorrelationGraphEditor: React.FC<Props> = ({\n    simulation,\n    canEditPages,\n    correlationGraphId,\n}: Props) => {\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [connected, setConnected] = useState(false);\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:PartialCorrelationGraph\",\n        id: `partial-corr-graph-${Math.random().toString(36).substr(2, 10)}`,\n        simulation: simulation,\n        fn: \"pearson\",\n        top: false,\n        n: 10,\n        direction: \"negative\",\n        useEndpoints: true,\n        usePerturbation: false,\n        title: \"\",\n        height: 600,\n    });\n\n    useDispatcherEventWithSender<SelectedSimulation>(\n        \"onCorrelationGraphBarClick\",\n        (selection) => {\n            setState((prevState) => ({\n                ...prevState,\n                ...filterByKey(selection, (k) => k !== \"sender\"),\n            }));\n        },\n        correlationGraphId,\n        [setState]\n    );\n\n    useEffect(() => {\n        const tmpState = filterByKey(\n            state,\n            (k) =>\n                !connected ||\n                ![\n                    \"compareWith\",\n                    \"fn\",\n                    \"useEndpoints\",\n                    \"usePerturbation\",\n                ].includes(k)\n        );\n        if (connected) {\n            tmpState[\"connectedTo\"] = correlationGraphId;\n        }\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(tmpState, undefined, 2)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state, connected, correlationGraphId]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl=\"8\">\n                    <PartialCorrelationGraph\n                        {...state}\n                        connectedTo={correlationGraphId}\n                    />\n                </Col>\n                <Col xs=\"12\" xl=\"4\" className=\"d-flex flex-column\">\n                    <Card className=\"bg-gradient-dark shadow mb-2 flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Change your graph\n                            </h6>\n                        </CardHeader>\n                        <CardBody className=\"text-white-50\">\n                            <FormGroup>\n                                <Label for=\"input-title-pcorr\">Title</Label>\n                                <Input\n                                    id=\"input-title-pcorr\"\n                                    type=\"text\"\n                                    value={state.title}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            title: e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-height-pcorr\">Height</Label>\n                                <Input\n                                    id=\"input-height-pcorr\"\n                                    type=\"number\"\n                                    value={state.height}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            height: +e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-is-connected\"\n                                    checked={connected}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setConnected(e.target.checked)\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-is-connected\"\n                                >\n                                    {`Link to the correlation graph?${\n                                        canEditPages\n                                            ? ` (If you\n                                    enable this option do not close the page\n                                    until you copied the code for both\n                                    correlation graph and detail graph).`\n                                            : \"\"\n                                    }`}\n                                </label>\n                            </div>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-top-n-pcorr\"\n                                    checked={state.top}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            top: e.target.checked,\n                                        }))\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-top-n-pcorr\"\n                                >\n                                    Show only the top-N results?\n                                </label>\n                            </div>\n                            {state.top && (\n                                <>\n                                    <FormGroup>\n                                        <Label for=\"input-number-pcorr\">\n                                            Number of top results\n                                        </Label>\n                                        <Input\n                                            id=\"input-number-pcorr\"\n                                            type=\"number\"\n                                            value={state.n}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    n: +e.target.value,\n                                                }))\n                                            }\n                                        />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label for=\"input-direction-pcorr\">\n                                            Direction\n                                        </Label>\n                                        <Input\n                                            id=\"input-direction-pcorr\"\n                                            type=\"select\"\n                                            value={state.direction}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    direction: e.target\n                                                        .value as unknown as Direction,\n                                                }))\n                                            }\n                                        >\n                                            <option value=\"both\">Both</option>\n                                            <option value=\"positive\">\n                                                Top-N positive\n                                            </option>\n                                            <option value=\"negative\">\n                                                Top-N negative\n                                            </option>\n                                        </Input>\n                                    </FormGroup>\n                                </>\n                            )}\n                        </CardBody>\n                    </Card>\n                    {canEditPages && (\n                        <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    )}\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default CorrelationGraphEditor;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport { Alert } from \"reactstrap\";\nimport Plot from \"react-plotly.js\";\nimport { useDispatcherEventWithSender } from \"../../../Hooks/useDispatcherEvent\";\nimport { SelectedSimulation } from \"./CorrelationGraph\";\n\ninterface Props {\n    id?: string;\n    simulation: number;\n    compareWith?: number;\n    fn?: \"pearson\" | \"spearman\";\n    top?: boolean;\n    n?: number;\n    direction?: \"positive\" | \"negative\" | \"both\";\n    useEndpoints?: boolean;\n    usePerturbation?: boolean;\n    title?: string;\n    height?: number;\n    connectedTo?: string;\n}\n\ninterface Data {\n    x: string[];\n    y: number[];\n}\n\ninterface State {\n    data?: Data;\n    error?: boolean;\n    message?: string;\n}\n\ninterface SelectionState {\n    compareWith?: number;\n    fn?: \"pearson\" | \"spearman\";\n    useEndpoints?: boolean;\n    usePerturbation?: boolean;\n}\n\nconst PartialCorrelationGraph: React.FC<Props> = ({\n    simulation,\n    title,\n    height = 600,\n    top = false,\n    n = 10,\n    direction = \"negative\",\n    connectedTo,\n    ...selectionProps\n}: Props) => {\n    const [state, setState] = useState<State>({});\n    const [selectionState, setSelectionState] = useState<SelectionState>({\n        compareWith: selectionProps.compareWith,\n        fn: selectionProps.fn,\n        useEndpoints: selectionProps.useEndpoints,\n        usePerturbation: selectionProps.useEndpoints,\n    });\n\n    const { data, error, message } = state;\n    const { compareWith, fn, useEndpoints, usePerturbation } = selectionState;\n\n    useEffect(() => {\n        setState({});\n        if (compareWith && compareWith > 0) {\n            axios\n                .post<Data>(\n                    route(\"simulations.plugins.partialCorrelation\", simulation),\n                    {\n                        compareWith,\n                        fn,\n                        top,\n                        n,\n                        direction,\n                        useEndpoints,\n                        usePerturbation,\n                    }\n                )\n                .then(({ data }) => {\n                    setState({ data });\n                })\n                .catch((e) => {\n                    setState({\n                        error: true,\n                        message: e.response.data.message ?? e.message,\n                    });\n                });\n        }\n    }, [\n        simulation,\n        compareWith,\n        fn,\n        top,\n        n,\n        direction,\n        useEndpoints,\n        usePerturbation,\n    ]);\n\n    useDispatcherEventWithSender<SelectedSimulation>(\n        \"onCorrelationGraphBarClick\",\n        (selection) => {\n            setSelectionState((prevState) => ({\n                ...prevState,\n                ...selection,\n            }));\n        },\n        connectedTo,\n        [setSelectionState]\n    );\n\n    if (!compareWith || compareWith < 0) {\n        return (\n            <Alert color=\"primary\">\n                <i className=\"fas fa-exclamation-circle mx-2\" />\n                Click on a bar in the correlation graph to display its details.\n            </Alert>\n        );\n    }\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    const min = data ? Math.min(...data.y) : 0;\n    const max = data ? Math.max(...data.y) : 0;\n    const range = Math.max(Math.abs(min), Math.abs(max));\n    const cmin = -range;\n    // const cdiff = data ? cmax - cmin : 0;\n\n    return (\n        <>\n            {!!data && (\n                <>\n                    <div className=\"d-flex flex-grow-1\">\n                        <Plot\n                            data={[\n                                {\n                                    ...data,\n                                    type: \"bar\",\n                                    marker: {\n                                        color: data.y,\n                                        cmin: cmin,\n                                        cmax: range,\n                                        colorscale: [\n                                            [0, \"rgb(5,10,172)\"],\n                                            [0.35, \"rgb(106,137,247)\"],\n                                            [0.5, \"rgb(255,255,255)\"],\n                                            [0.6, \"rgb(220,170,132)\"],\n                                            [0.7, \"rgb(230,145,90)\"],\n                                            [1, \"rgb(178,10,28)\"],\n                                        ],\n                                        showscale: true,\n                                    },\n                                },\n                            ]}\n                            layout={{\n                                bargap: 0,\n                                yaxis: {\n                                    title:\n                                        fn === \"pearson\"\n                                            ? \"Pearson Correlation\"\n                                            : \"Spearman Correlation\",\n                                    // range: [-1, 1],\n                                },\n                                font: { size: 12 },\n                                autosize: true,\n                                showlegend: false,\n                                title,\n                            }}\n                            config={{\n                                responsive: true,\n                            }}\n                            style={{\n                                width: \"100%\",\n                                height: `${height}px`,\n                            }}\n                            useResizeHandler\n                        />\n                    </div>\n                </>\n            )}\n            {!data && (\n                <Alert color=\"primary\">\n                    <i className=\"fas fa-circle-notch fa-spin mx-2\" />\n                    Building image. Please wait...\n                </Alert>\n            )}\n        </>\n    );\n};\n\nexport default PartialCorrelationGraph;\n"],"sourceRoot":""}