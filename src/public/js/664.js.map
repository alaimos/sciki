{"version":3,"sources":["webpack:///./resources/js/Components/Layout/Headers/DefaultHeader.tsx","webpack:///./resources/js/Pages/Wiki/Search.tsx"],"names":["headerBg","title","className","fluid","lg","md","query","pages","tags","can","data","length","create","href","flush","map","p","key","slug","tag","xs","meta","from","to","total","listClassName","links","index","active","label","url","disabled","as","method","dangerouslySetInnerHTML","__html","t","id"],"mappings":"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","file":"js/664.js?id=1c3e98f649fd67e2a320","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\n\ninterface Props {\n    headerBg?: string;\n    title?: React.ReactNode;\n}\n\nconst DefaultHeader: React.FC<Props> = ({ headerBg, title }: Props) => {\n    return (\n        <>\n            <div\n                className={`header pb-8 pt-5 pt-lg-8 d-flex align-items-center ${\n                    headerBg ?? \"bg-gradient-gray-dark\"\n                }`}\n            >\n                <Container\n                    className=\"d-flex align-items-center flex-grow-1\"\n                    fluid\n                >\n                    <Row className=\"flex-grow-1\">\n                        <Col lg=\"7\" md=\"10\">\n                            <h1 className=\"display-2 text-white\">\n                                {title ?? \" \"}\n                            </h1>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </>\n    );\n};\n\nexport default DefaultHeader;\n","import React from \"react\";\nimport Header from \"../../Components/Layout/Headers/DefaultHeader\";\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    Container,\n    ListGroup,\n    ListGroupItem,\n    Pagination,\n    PaginationItem,\n    PaginationLink,\n    Row,\n} from \"reactstrap\";\nimport type { Collection } from \"../../Types/common\";\nimport route from \"ziggy-js\";\nimport { InertiaLink } from \"@inertiajs/inertia-react\";\nimport classNames from \"classnames\";\n\ninterface Page {\n    id: number;\n    slug: string;\n    title: string;\n    content: string;\n    tags: string[];\n}\n\ninterface Tag {\n    id: number;\n    tag: string;\n    name: string;\n    type: string;\n}\n\ninterface Props {\n    query: string;\n    pages: Collection<Page>;\n    tags: Collection<Tag>;\n    can: {\n        create: boolean;\n    };\n}\n\nconst Search: React.FC<Props> = ({ query, pages, tags, can }: Props) => {\n    return (\n        <>\n            <Header title={`Search results for \"${query}\"`} />\n            <Container className=\"mt--7\" fluid>\n                <Card className=\"shadow mb-2\">\n                    <CardHeader className=\"bg-transparent\">\n                        <h6 className=\"text-uppercase text-dark ls-1 mb-1\">\n                            Pages containing your query\n                        </h6>\n                    </CardHeader>\n                    <CardBody>\n                        <Row>\n                            <Col>\n                                {pages.data.length === 0 && (\n                                    <>\n                                        <p>\n                                            There were no results matching your\n                                            query.\n                                        </p>\n                                        {can.create && (\n                                            <p>\n                                                If you wish to create the page\n                                                &quot;\n                                                <a\n                                                    href={route(\n                                                        \"wiki.show\",\n                                                        query\n                                                    )}\n                                                    className=\"text-red\"\n                                                >\n                                                    {query}\n                                                </a>\n                                                &quot; click{\" \"}\n                                                <a\n                                                    href={route(\n                                                        \"wiki.show\",\n                                                        query\n                                                    )}\n                                                >\n                                                    here\n                                                </a>\n                                                .\n                                            </p>\n                                        )}\n                                    </>\n                                )}\n                                {pages.data.length > 0 && (\n                                    <>\n                                        <ListGroup flush>\n                                            {pages.data.map((p) => (\n                                                <ListGroupItem\n                                                    key={p.slug}\n                                                    href={route(\n                                                        \"wiki.show\",\n                                                        p.slug\n                                                    )}\n                                                    tag={InertiaLink}\n                                                >\n                                                    {p.title}\n                                                </ListGroupItem>\n                                            ))}\n                                        </ListGroup>\n                                    </>\n                                )}\n                            </Col>\n                        </Row>\n                        {pages.data.length > 0 && (\n                            <Row>\n                                <Col className=\"text-sm text-muted\" xs=\"6\">\n                                    Showing results from {pages.meta.from} to{\" \"}\n                                    {pages.meta.to} of {pages.meta.total}\n                                </Col>\n                                <Col xs=\"6\">\n                                    <Pagination\n                                        className=\"pagination justify-content-end\"\n                                        listClassName=\"justify-content-end\"\n                                    >\n                                        {pages.meta.links.map(\n                                            ({ active, label, url }, index) => (\n                                                <PaginationItem\n                                                    key={index}\n                                                    className={classNames({\n                                                        disabled: !active,\n                                                    })}\n                                                >\n                                                    <PaginationLink\n                                                        tag={InertiaLink}\n                                                        href={url ?? \"#\"}\n                                                        as=\"button\"\n                                                        method=\"post\"\n                                                        data={{ query }}\n                                                        dangerouslySetInnerHTML={{\n                                                            __html: label,\n                                                        }}\n                                                    />\n                                                </PaginationItem>\n                                            )\n                                        )}\n                                    </Pagination>\n                                </Col>\n                            </Row>\n                        )}\n                    </CardBody>\n                </Card>\n                <Card className=\"shadow\">\n                    <CardHeader className=\"bg-transparent\">\n                        <h6 className=\"text-uppercase text-dark ls-1 mb-1\">\n                            Tags corresponding with your query\n                        </h6>\n                    </CardHeader>\n                    <CardBody>\n                        <Row>\n                            <Col>\n                                {tags.data.length === 0 && (\n                                    <p>\n                                        There were no results matching your\n                                        query.\n                                    </p>\n                                )}\n                                {tags.data.length > 0 && (\n                                    <>\n                                        <ListGroup flush>\n                                            {tags.data.map((t) => (\n                                                <ListGroupItem\n                                                    key={t.id}\n                                                    href={route(\n                                                        \"wiki.show\",\n                                                        t.id\n                                                    )}\n                                                    tag={InertiaLink}\n                                                >\n                                                    {t.tag}\n                                                </ListGroupItem>\n                                            ))}\n                                        </ListGroup>\n                                    </>\n                                )}\n                            </Col>\n                        </Row>\n                        {tags.data.length > 0 && (\n                            <Row>\n                                <Col className=\"text-sm text-muted\" xs=\"6\">\n                                    Showing results from {tags.meta.from} to{\" \"}\n                                    {tags.meta.to} of {tags.meta.total}\n                                </Col>\n                                <Col xs=\"6\">\n                                    <Pagination\n                                        className=\"pagination justify-content-end\"\n                                        listClassName=\"justify-content-end\"\n                                    >\n                                        {tags.meta.links.map(\n                                            ({ active, label, url }, index) => (\n                                                <PaginationItem\n                                                    key={index}\n                                                    className={classNames({\n                                                        disabled: !active,\n                                                    })}\n                                                >\n                                                    <PaginationLink\n                                                        tag={InertiaLink}\n                                                        href={url ?? \"#\"}\n                                                        as=\"button\"\n                                                        method=\"post\"\n                                                        data={{ query }}\n                                                        dangerouslySetInnerHTML={{\n                                                            __html: label,\n                                                        }}\n                                                    />\n                                                </PaginationItem>\n                                            )\n                                        )}\n                                    </Pagination>\n                                </Col>\n                            </Row>\n                        )}\n                    </CardBody>\n                </Card>\n            </Container>\n        </>\n    );\n};\n\nexport default Search;\n"],"sourceRoot":""}