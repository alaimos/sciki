{"version":3,"sources":["webpack:///./resources/js/Components/Layout/Headers/DefaultHeader.tsx","webpack:///./resources/js/Components/TagsManagerCard.tsx","webpack:///./resources/js/Modules/Simulations/Components/NodesTable.tsx","webpack:///./resources/js/Modules/Simulations/Pages/Simulations/Create.tsx"],"names":["headerBg","title","className","fluid","lg","md","tags","errors","onAddTag","onDeleteTag","dark","typeAheadRef","useRef","useState","isLoading","setIsLoading","tagInputValue","setTagInputValue","tagInputOptions","setTagInputOptions","doAddTag","newTag","newTagParts","split","length","join","current","clear","shadow","style","height","map","tag","key","href","onClick","e","preventDefault","filterBy","id","options","onSearch","query","response","data","onChange","selected","onKeyDown","re","code","target","value","minLength","placeholder","ref","allowNew","addonType","values","label","getTextTag","NodeType","organism","selectedNodes","onNodeClick","undefined","sizePerPage","page","totalSize","state","setState","useEffect","then","prevState","console","error","pagination","useMemo","alwaysShowAllBtns","showTotal","withFirstAndLast","sizePerPageRenderer","onSizePerPageChange","name","keyField","columns","dataField","text","sort","filter","isDummyField","headerStyle","width","formatter","_","row","has","get","OVER_EXPRESSED","size","color","outline","placement","UNDER_EXPRESSED","NON_EXPRESSED","KNOCKOUT","remote","bootstrap4","bordered","onTableChange","newState","sortField","sortOrder","filters","overlay","spinner","canCreateSimulation","organisms","nodes","existing","setData","post","processing","submitForm","Object","some","v","includes","confirm","alert","onSubmit","pills","disabled","xl","for","type","invalid","xs","checked","previousData","remote_id","o","node","unset","set","t","deletedTag"],"mappings":"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","file":"js/743.js?id=a88be501189f20d1c8d2","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\n\ninterface Props {\n    headerBg?: string;\n    title?: React.ReactNode;\n}\n\nconst DefaultHeader: React.FC<Props> = ({ headerBg, title }: Props) => {\n    return (\n        <>\n            <div\n                className={`header pb-8 pt-5 pt-lg-8 d-flex align-items-center ${\n                    headerBg ?? \"bg-gradient-gray-dark\"\n                }`}\n            >\n                <Container\n                    className=\"d-flex align-items-center flex-grow-1\"\n                    fluid\n                >\n                    <Row className=\"flex-grow-1\">\n                        <Col lg=\"7\" md=\"10\">\n                            <h1 className=\"display-2 text-white\">\n                                {title ?? \" \"}\n                            </h1>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </>\n    );\n};\n\nexport default DefaultHeader;\n","import React, { useRef, useState } from \"react\";\nimport {\n    Badge,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    Row,\n} from \"reactstrap\";\nimport classNames from \"classnames\";\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\n\ninterface Props {\n    tags: string[];\n    errors?: string;\n    onAddTag: (newTag: string) => void;\n    onDeleteTag: (deletedTag: string) => void;\n    dark?: boolean;\n}\n\ntype TypeAheadOption =\n    | string\n    | {\n          customOption: boolean;\n          label: string;\n          id: string;\n      };\n\nconst TagsManagerCard: React.FC<Props> = ({\n    tags,\n    errors,\n    onAddTag,\n    onDeleteTag,\n    dark = true,\n}: Props) => {\n    const typeAheadRef = useRef<AsyncTypeahead<TypeAheadOption>>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [tagInputValue, setTagInputValue] = useState<TypeAheadOption[]>([]);\n    const [tagInputOptions, setTagInputOptions] = useState<string[]>([]);\n\n    const getTextTag = (values: TypeAheadOption[]) => {\n        if (values.length > 0) {\n            if (typeof values[0] === \"object\") {\n                return values[0].label;\n            } else if (typeof values[0] === \"string\") {\n                return values[0];\n            }\n        }\n        return undefined;\n    };\n\n    const doAddTag = (newTag?: string) => {\n        if (newTag) {\n            const newTagParts = newTag.split(/:\\s*/, 2);\n            onAddTag(\n                newTagParts.length === 1\n                    ? `unknown: ${newTagParts[0]}`\n                    : newTagParts.join(\": \")\n            );\n            // @ts-ignore\n            typeAheadRef.current?.clear();\n        }\n    };\n\n    const handleSearch = async (query: string) => {\n        setIsLoading(true);\n        try {\n            const response = await axios.post(route(\"tag.typeahead\"), {\n                query,\n            });\n            setTagInputOptions(response.data as string[]);\n        } catch (_) {\n            setTagInputOptions([]);\n        }\n        setIsLoading(false);\n    };\n\n    return (\n        <Card\n            className={classNames({ \"bg-gradient-dark\": dark, shadow: true })}\n        >\n            <CardHeader className=\"bg-transparent\">\n                <h6 className=\"text-uppercase text-light ls-1 mb-1\">Tags</h6>\n            </CardHeader>\n            <CardBody>\n                <Row>\n                    <Col style={{ height: \"100px\" }} className=\"overflow-auto\">\n                        {tags.map((tag) => (\n                            <Badge\n                                key={tag}\n                                className=\"badge-default mx-1 text-light\"\n                                href=\"#\"\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    onDeleteTag(tag);\n                                }}\n                                title=\"Click to delete\"\n                            >\n                                {tag}\n                            </Badge>\n                        ))}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        {!!errors && (\n                            <div className=\"invalid-feedback d-block\">\n                                <strong>{errors}</strong>\n                            </div>\n                        )}\n                    </Col>\n                </Row>\n                <Row className=\"mt-2\">\n                    <Col>\n                        <InputGroup>\n                            <AsyncTypeahead<TypeAheadOption>\n                                filterBy={() => true}\n                                id=\"tags-manager-add-tag-input\"\n                                isLoading={isLoading}\n                                options={tagInputOptions}\n                                onSearch={handleSearch}\n                                onChange={(selected: TypeAheadOption[]) =>\n                                    setTagInputValue(selected)\n                                }\n                                onKeyDown={(e) => {\n                                    const re =\n                                        e as unknown as React.KeyboardEvent<HTMLInputElement>;\n                                    if (\n                                        re.code === \"Enter\" ||\n                                        re.code === \"NumpadEnter\"\n                                    ) {\n                                        // @ts-ignore\n                                        doAddTag(re.target.value);\n                                        // @ts-ignore\n                                        typeAheadRef.current?.clear();\n                                    }\n                                }}\n                                selected={tagInputValue}\n                                minLength={3}\n                                className=\"text-dark\"\n                                placeholder=\"Add new tag (category: tag)\"\n                                ref={typeAheadRef}\n                                allowNew\n                            />\n                            <InputGroupAddon addonType=\"append\">\n                                <InputGroupText>\n                                    <a\n                                        className=\"text-primary\"\n                                        href=\"#\"\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            doAddTag(getTextTag(tagInputValue));\n                                        }}\n                                    >\n                                        <i className=\"fas fa-plus\" />\n                                    </a>\n                                </InputGroupText>\n                            </InputGroupAddon>\n                        </InputGroup>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport default TagsManagerCard;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { has, get } from \"lodash\";\nimport BootstrapTable, {\n    SizePerPageRendererOptions,\n} from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport filterFactory, { textFilter } from \"react-bootstrap-table2-filter\";\nimport axios from \"axios\";\n// @ts-ignore\nimport overlayFactory from \"react-bootstrap-table2-overlay\";\nimport route from \"ziggy-js\";\nimport { Button, UncontrolledTooltip } from \"reactstrap\";\n\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css\";\n\nexport enum NodeType {\n    KNOCKOUT = -1,\n    NON_EXPRESSED = 0,\n    UNDER_EXPRESSED = 1,\n    OVER_EXPRESSED = 2,\n}\n\ninterface Props {\n    organism?: number;\n    selectedNodes: Record<number, NodeType>;\n    onNodeClick: (node: number, type: NodeType) => void;\n}\n\ninterface Node {\n    id: number;\n    accession: string;\n    name: string;\n}\n\ninterface State {\n    data?: Node[];\n    sizePerPage: number;\n    page: number;\n    totalSize: number;\n}\n\nconst NodesTable: React.FC<Props> = ({\n    organism,\n    selectedNodes,\n    onNodeClick,\n}: Props) => {\n    if (!organism)\n        return (\n            <div className=\"py-4\">Please select an organism to continue</div>\n        );\n\n    const [state, setState] = useState<State>({\n        data: undefined,\n        sizePerPage: 10,\n        page: 1,\n        totalSize: 0,\n    });\n\n    const { data, sizePerPage, page, totalSize } = state;\n\n    useEffect(() => {\n        setState({\n            data: undefined,\n            sizePerPage: 10,\n            page: 1,\n            totalSize: 0,\n        });\n    }, [organism]);\n\n    useEffect(() => {\n        if (data === undefined) {\n            axios\n                .post<State>(route(\"simulations.nodes.table\", organism), {})\n                .then((value) => {\n                    setState((prevState) => ({\n                        ...prevState,\n                        ...value.data,\n                    }));\n                })\n                .catch((e) => {\n                    console.error(e);\n                });\n        }\n    }, [organism, data]);\n\n    const pagination = useMemo(\n        () =>\n            paginationFactory({\n                page,\n                totalSize,\n                sizePerPage,\n                alwaysShowAllBtns: true,\n                showTotal: true,\n                withFirstAndLast: false,\n                sizePerPageRenderer: ({\n                    onSizePerPageChange,\n                }: SizePerPageRendererOptions) => (\n                    <div\n                        className=\"dataTables_length\"\n                        id=\"datatable-basic_length\"\n                    >\n                        <label>\n                            Show{\" \"}\n                            {\n                                <select\n                                    name=\"datatable-basic_length\"\n                                    aria-controls=\"datatable-basic\"\n                                    className=\"form-control form-control-sm\"\n                                    onChange={(e) =>\n                                        onSizePerPageChange(+e.target.value, 1)\n                                    }\n                                >\n                                    <option value=\"10\">10</option>\n                                    <option value=\"25\">25</option>\n                                    <option value=\"50\">50</option>\n                                    <option value=\"100\">100</option>\n                                </select>\n                            }{\" \"}\n                            entries.\n                        </label>\n                    </div>\n                ),\n            }),\n        [page, totalSize, sizePerPage]\n    );\n\n    return (\n        <div className=\"py-4\">\n            <BootstrapTable\n                keyField=\"id\"\n                data={data ?? []}\n                columns={[\n                    {\n                        dataField: \"accession\",\n                        text: \"Accession\",\n                        sort: true,\n                        filter: textFilter(),\n                    },\n                    {\n                        dataField: \"name\",\n                        text: \"Name\",\n                        sort: true,\n                        filter: textFilter(),\n                    },\n                    {\n                        dataField: \"overexpressed\",\n                        isDummyField: true,\n                        text: \"\",\n                        headerStyle: {\n                            width: \"60px\",\n                        },\n                        formatter: (_, row) => {\n                            const selected =\n                                has(selectedNodes, row.id) &&\n                                get(selectedNodes, row.id) ===\n                                    NodeType.OVER_EXPRESSED;\n                            return (\n                                <>\n                                    <Button\n                                        id={`overexpressed-button-${row.id}`}\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            onNodeClick(\n                                                row.id,\n                                                NodeType.OVER_EXPRESSED\n                                            );\n                                        }}\n                                        size=\"sm\"\n                                        color=\"danger\"\n                                        outline={!selected}\n                                    >\n                                        <i className=\"fas fa-level-up-alt fa-fw\" />\n                                    </Button>\n                                    <UncontrolledTooltip\n                                        placement=\"auto\"\n                                        target={`overexpressed-button-${row.id}`}\n                                    >\n                                        Set as overexpressed\n                                    </UncontrolledTooltip>\n                                </>\n                            );\n                        },\n                    },\n                    {\n                        dataField: \"underexpressed\",\n                        isDummyField: true,\n                        text: \"\",\n                        headerStyle: {\n                            width: \"60px\",\n                        },\n                        formatter: (_, row) => {\n                            const selected =\n                                has(selectedNodes, row.id) &&\n                                get(selectedNodes, row.id) ===\n                                    NodeType.UNDER_EXPRESSED;\n                            return (\n                                <>\n                                    <Button\n                                        id={`underexpressed-button-${row.id}`}\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            onNodeClick(\n                                                row.id,\n                                                NodeType.UNDER_EXPRESSED\n                                            );\n                                        }}\n                                        size=\"sm\"\n                                        color=\"primary\"\n                                        outline={!selected}\n                                    >\n                                        <i className=\"fas fa-level-down-alt fa-fw\" />\n                                    </Button>\n                                    <UncontrolledTooltip\n                                        placement=\"auto\"\n                                        target={`underexpressed-button-${row.id}`}\n                                    >\n                                        Set as underexpressed\n                                    </UncontrolledTooltip>\n                                </>\n                            );\n                        },\n                    },\n                    {\n                        dataField: \"nonexpressed\",\n                        isDummyField: true,\n                        text: \"\",\n                        headerStyle: {\n                            width: \"60px\",\n                        },\n                        formatter: (_, row) => {\n                            const selected =\n                                has(selectedNodes, row.id) &&\n                                get(selectedNodes, row.id) ===\n                                    NodeType.NON_EXPRESSED;\n                            return (\n                                <>\n                                    <Button\n                                        id={`nonexpressed-button-${row.id}`}\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            onNodeClick(\n                                                row.id,\n                                                NodeType.NON_EXPRESSED\n                                            );\n                                        }}\n                                        size=\"sm\"\n                                        color=\"warning\"\n                                        outline={!selected}\n                                    >\n                                        <i className=\"fas fa-ban fa-fw\" />\n                                    </Button>\n                                    <UncontrolledTooltip\n                                        placement=\"auto\"\n                                        target={`nonexpressed-button-${row.id}`}\n                                    >\n                                        Set as non-expressed\n                                    </UncontrolledTooltip>\n                                </>\n                            );\n                        },\n                    },\n                    {\n                        dataField: \"knockedout\",\n                        isDummyField: true,\n                        text: \"\",\n                        headerStyle: {\n                            width: \"60px\",\n                        },\n                        formatter: (_, row) => {\n                            const selected =\n                                has(selectedNodes, row.id) &&\n                                get(selectedNodes, row.id) ===\n                                    NodeType.KNOCKOUT;\n                            return (\n                                <>\n                                    <Button\n                                        id={`knockedout-button-${row.id}`}\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            onNodeClick(\n                                                row.id,\n                                                NodeType.KNOCKOUT\n                                            );\n                                        }}\n                                        size=\"sm\"\n                                        color=\"default\"\n                                        outline={!selected}\n                                    >\n                                        <i className=\"fas fa-times fa-fw\" />\n                                    </Button>\n                                    <UncontrolledTooltip\n                                        placement=\"auto\"\n                                        target={`knockedout-button-${row.id}`}\n                                    >\n                                        Set as knocked-out\n                                    </UncontrolledTooltip>\n                                </>\n                            );\n                        },\n                    },\n                ]}\n                remote\n                bootstrap4\n                pagination={pagination}\n                filter={filterFactory()}\n                bordered={false}\n                onTableChange={(_, newState) => {\n                    axios\n                        .post<State>(\n                            route(\"simulations.nodes.table\", organism),\n                            {\n                                page: newState.page,\n                                sizePerPage: newState.sizePerPage,\n                                sortField: newState.sortField,\n                                sortOrder: newState.sortOrder,\n                                filters: newState.filters,\n                            }\n                        )\n                        .then((value) => {\n                            setState((prevState) => ({\n                                ...prevState,\n                                ...value.data,\n                            }));\n                        })\n                        .catch((e) => {\n                            console.error(e);\n                        });\n                }}\n                overlay={overlayFactory({ spinner: true })}\n            />\n        </div>\n    );\n};\n\nexport default NodesTable;\n","import React from \"react\";\nimport { get, has, set, unset } from \"lodash\";\nimport Header from \"../../../../Components/Layout/Headers/DefaultHeader\";\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    Container,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Nav,\n    NavItem,\n    NavLink,\n    Row,\n} from \"reactstrap\";\nimport type { CommonPageProps } from \"../../../../Types/page\";\nimport { useForm } from \"@inertiajs/inertia-react\";\nimport TagsManagerCard from \"../../../../Components/TagsManagerCard\";\nimport route from \"ziggy-js\";\nimport classNames from \"classnames\";\nimport NodesTable, { NodeType } from \"../../Components/NodesTable\";\n\ninterface Organism {\n    id: number;\n    name: string;\n}\n\ninterface Props extends CommonPageProps {\n    organisms: Organism[];\n}\n\ninterface FormType {\n    name: string;\n    remote_id?: number;\n    nodes?: Record<number, NodeType>;\n    organism?: number;\n    tags: string[];\n    existing: boolean;\n}\n\nconst Create: React.FC<Props> = ({\n    capabilities: {\n        simulations: { create: canCreateSimulation },\n    },\n    organisms,\n}: Props) => {\n    if (!canCreateSimulation) return null;\n    const { data, setData, errors, post, processing } = useForm<FormType>({\n        name: \"\",\n        nodes: {},\n        tags: [],\n        existing: false,\n    });\n    const submitForm = async (\n        e:\n            | React.MouseEvent<HTMLAnchorElement>\n            | React.FormEvent<HTMLFormElement>\n    ) => {\n        e.preventDefault();\n        if (\n            !data.existing &&\n            !Object.values(data.nodes ?? {}).some((v) =>\n                [NodeType.OVER_EXPRESSED, NodeType.UNDER_EXPRESSED].includes(v)\n            )\n        ) {\n            alert(\n                \"You must select at least one over- or under-expressed node for the simulation.\"\n            );\n            return;\n        }\n        if (\n            data.tags.length === 0 &&\n            !confirm(\n                \"You did not select any tag for your simulation. \" +\n                    \"Tagging the simulation is fundamental to use many advanced features. Are you sure?\"\n            )\n        )\n            return;\n        await post(route(\"simulations.store\"));\n    };\n\n    return (\n        <Form onSubmit={submitForm}>\n            <Header title=\"New simulation\" />\n            <Container className=\"mt--7\" fluid>\n                <Row className=\"mb-2\">\n                    <Col lg={12} className=\"text-right\">\n                        <Nav\n                            className=\"nav-fill flex-column-reverse flex-sm-row-reverse\"\n                            pills\n                        >\n                            <NavItem className=\"flex-grow-0\">\n                                <NavLink\n                                    className=\"mb-sm-3 mb-md-0\"\n                                    onClick={submitForm}\n                                    disabled={processing}\n                                    href=\"#\"\n                                >\n                                    <i className=\"fas fa-save mr-2\" />\n                                    Save\n                                </NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"mb-5 mb-xl-2\" xl=\"8\">\n                        <Card className=\"shadow\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase text-dark ls-1 mb-1\">\n                                    Simulation Details\n                                </h6>\n                            </CardHeader>\n                            <CardBody>\n                                <FormGroup\n                                    className={classNames({\n                                        \"has-danger\": !!errors.name,\n                                    })}\n                                >\n                                    <Label for=\"create-simulation-name-field\">\n                                        Name:\n                                    </Label>\n                                    <Input\n                                        id=\"create-simulation-name-field\"\n                                        placeholder=\"Give a name to your simulation\"\n                                        type=\"text\"\n                                        value={data.name}\n                                        onChange={(e) =>\n                                            setData(\"name\", e.target.value)\n                                        }\n                                        invalid={!!errors.name}\n                                    />\n                                    <FormFeedback\n                                        tag=\"span\"\n                                        className=\"invalid-feedback\"\n                                    >\n                                        <strong>{errors.name}</strong>\n                                    </FormFeedback>\n                                </FormGroup>\n                                <Row>\n                                    <Col xs={1}>\n                                        <label className=\"custom-toggle\">\n                                            <input\n                                                type=\"checkbox\"\n                                                checked={data.existing}\n                                                onChange={() =>\n                                                    setData((previousData) => ({\n                                                        ...previousData,\n                                                        existing:\n                                                            !previousData.existing,\n                                                    }))\n                                                }\n                                            />\n                                            <span className=\"custom-toggle-slider rounded-circle\" />\n                                        </label>\n                                    </Col>\n                                    <Col xs=\"11\">\n                                        Import an existing simulation?\n                                    </Col>\n                                </Row>\n                                {data.existing && (\n                                    <FormGroup\n                                        className={classNames({\n                                            \"has-danger\": !!errors.remote_id,\n                                        })}\n                                    >\n                                        <Label for=\"create-simulation-name-field\">\n                                            Simulation Id:\n                                        </Label>\n                                        <Input\n                                            id=\"create-simulation-id-field\"\n                                            placeholder=\"Insert here the ID of an existing simulation\"\n                                            type=\"text\"\n                                            value={data.remote_id}\n                                            onChange={(e) =>\n                                                setData(\n                                                    \"remote_id\",\n                                                    +e.target.value\n                                                )\n                                            }\n                                            invalid={!!errors.remote_id}\n                                        />\n                                        <FormFeedback\n                                            tag=\"span\"\n                                            className=\"invalid-feedback\"\n                                        >\n                                            <strong>{errors.remote_id}</strong>\n                                        </FormFeedback>\n                                    </FormGroup>\n                                )}\n                                {!data.existing && (\n                                    <>\n                                        <FormGroup\n                                            className={classNames({\n                                                \"has-danger\": !!errors.organism,\n                                            })}\n                                        >\n                                            <Label for=\"create-simulation-organism-field\">\n                                                Organism:\n                                            </Label>\n                                            <Input\n                                                id=\"create-simulation-organism-field\"\n                                                placeholder=\"Give a name to your simulation\"\n                                                type=\"select\"\n                                                value={data.organism}\n                                                onChange={(e) =>\n                                                    setData(\n                                                        \"organism\",\n                                                        +e.target.value\n                                                    )\n                                                }\n                                                invalid={!!errors.organism}\n                                            >\n                                                <option value=\"\">\n                                                    -- Select an organism --\n                                                </option>\n                                                {organisms.map((o) => (\n                                                    <option\n                                                        value={o.id}\n                                                        key={o.id}\n                                                    >\n                                                        {o.name}\n                                                    </option>\n                                                ))}\n                                            </Input>\n                                            <FormFeedback\n                                                tag=\"span\"\n                                                className=\"invalid-feedback\"\n                                            >\n                                                <strong>\n                                                    {errors.organism}\n                                                </strong>\n                                            </FormFeedback>\n                                        </FormGroup>\n                                        <FormGroup\n                                            className={classNames({\n                                                \"has-danger\": !!errors.nodes,\n                                            })}\n                                        >\n                                            <Label for=\"create-simulation-nodes-table\">\n                                                Nodes:\n                                            </Label>\n                                            <NodesTable\n                                                organism={data.organism}\n                                                selectedNodes={data.nodes ?? {}}\n                                                onNodeClick={(node, type) => {\n                                                    setData((previousData) => {\n                                                        let nodes = {\n                                                            ...previousData.nodes,\n                                                        };\n                                                        if (\n                                                            has(nodes, node) &&\n                                                            get(nodes, node) ===\n                                                                type\n                                                        ) {\n                                                            unset(nodes, node);\n                                                        } else {\n                                                            nodes = set(\n                                                                nodes,\n                                                                node,\n                                                                type\n                                                            );\n                                                        }\n                                                        return {\n                                                            ...previousData,\n                                                            nodes,\n                                                        };\n                                                    });\n                                                }}\n                                            />\n                                            <FormFeedback\n                                                tag=\"span\"\n                                                className={classNames({\n                                                    \"invalid-feedback\": true,\n                                                    \"d-block\": !!errors.nodes,\n                                                })}\n                                            >\n                                                <strong>{errors.nodes}</strong>\n                                            </FormFeedback>\n                                        </FormGroup>\n                                    </>\n                                )}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col className=\"mb-5 mb-xl-2\" xl=\"4\">\n                        <TagsManagerCard\n                            tags={data.tags}\n                            onAddTag={(newTag) =>\n                                setData((previousData) => ({\n                                    ...previousData,\n                                    tags: [\n                                        ...previousData.tags.filter(\n                                            (t) => t !== newTag\n                                        ),\n                                        newTag,\n                                    ],\n                                }))\n                            }\n                            onDeleteTag={(deletedTag) =>\n                                setData((previousData) => ({\n                                    ...previousData,\n                                    tags: previousData.tags.filter(\n                                        (t) => t !== deletedTag\n                                    ),\n                                }))\n                            }\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        </Form>\n    );\n};\n\nexport default Create;\n"],"sourceRoot":""}