{"version":3,"sources":["webpack:///./resources/js/Modules/Simulations/Components/CorrelationGraphEditor.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/CorrelationGraph.tsx"],"names":["simulation","canEditPages","onIdChange","typeAheadRefTag","useRef","useState","isLoadingTags","setIsLoadingTags","tagInputValue","setTagInputValue","tagInputOptions","setTagInputOptions","pluginCode","setPluginCode","plugin","id","Math","random","toString","substr","fn","top","n","direction","useEndpoints","usePerturbation","findByTags","searchMode","title","height","state","setState","useEffect","doAddTag","length","prevState","filter","t","current","clear","handleDeleteTag","tag","e","preventDefault","JSON","stringify","undefined","xs","xl","className","for","type","value","onChange","target","checked","htmlFor","style","width","map","key","href","onClick","filterBy","isLoading","options","onSearch","query","response","data","selected","onKeyDown","re","code","minLength","placeholder","ref","addonType","CopyToClipboard","text","delay","trigger","maxHeight","overflowX","dispatcher","error","message","then","marker","color","y","cmin","cmax","colorscale","showscale","layout","bargap","yaxis","range","font","size","autosize","showlegend","config","responsive","useResizeHandler","event","points","customdata","dispatch","sender","compareWith"],"mappings":"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","file":"js/719.js?id=a26b226580fd3bf67231","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n    Badge,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\";\nimport CorrelationGraph from \"../WikiPlugins/CorrelationGraph\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\n\ninterface Props {\n    simulation: number;\n    canEditPages: boolean;\n    onIdChange: (id: string) => void;\n}\n\ntype Correlation = \"pearson\" | \"spearman\";\ntype Direction = \"positive\" | \"negative\";\ntype SearchMode = \"all\" | \"any\";\n\ninterface State {\n    plugin: \"@Simulations:CorrelationGraph\";\n    id: string;\n    simulation: number;\n    fn: Correlation;\n    top: boolean;\n    n: number;\n    direction: Direction;\n    useEndpoints: boolean;\n    usePerturbation: boolean;\n    findByTags: string[];\n    searchMode: SearchMode;\n    title: string;\n    height: number;\n}\n\nconst CorrelationGraphEditor: React.FC<Props> = ({\n    simulation,\n    canEditPages,\n    onIdChange,\n}: Props) => {\n    const typeAheadRefTag = useRef<AsyncTypeahead<string>>(null);\n    const [isLoadingTags, setIsLoadingTags] = useState(false);\n    const [tagInputValue, setTagInputValue] = useState<string[]>([]);\n    const [tagInputOptions, setTagInputOptions] = useState<string[]>([]);\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:CorrelationGraph\",\n        id: `corr-graph-${Math.random().toString(36).substr(2, 10)}`,\n        simulation: simulation,\n        fn: \"pearson\",\n        top: false,\n        n: 10,\n        direction: \"negative\",\n        useEndpoints: true,\n        usePerturbation: false,\n        findByTags: [],\n        searchMode: \"all\",\n        title: \"\",\n        height: 600,\n    });\n\n    useEffect(() => {\n        onIdChange(state.id);\n    }, [state.id]);\n\n    const doAddTag = () => {\n        if (tagInputValue && tagInputValue.length > 0) {\n            const newTag = tagInputValue[0];\n            if (newTag) {\n                setState((prevState) => ({\n                    ...prevState,\n                    findByTags: [\n                        ...prevState.findByTags.filter((t) => t !== newTag),\n                        newTag,\n                    ],\n                }));\n                // @ts-ignore\n                typeAheadRefTag.current?.clear();\n            }\n        }\n    };\n    const handleSearchTag = async (query: string) => {\n        setIsLoadingTags(true);\n        try {\n            const response = await axios.post(route(\"tag.typeahead\"), {\n                query,\n            });\n            setTagInputOptions(response.data as string[]);\n        } catch (_) {\n            setTagInputOptions([]);\n        }\n        setIsLoadingTags(false);\n    };\n    const handleDeleteTag =\n        (tag: string) => (e: React.MouseEvent<HTMLAnchorElement>) => {\n            e.preventDefault();\n            setState((prevState) => ({\n                ...prevState,\n                findByTags: [...prevState.findByTags.filter((t) => t !== tag)],\n            }));\n        };\n\n    useEffect(() => {\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(state, undefined, 2)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl=\"8\">\n                    <CorrelationGraph {...state} />\n                </Col>\n                <Col xs=\"12\" xl=\"4\" className=\"d-flex flex-column\">\n                    <Card className=\"bg-gradient-dark shadow mb-2 flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Change your graph\n                            </h6>\n                        </CardHeader>\n                        <CardBody className=\"text-white-50\">\n                            <FormGroup>\n                                <Label for=\"input-title\">Title</Label>\n                                <Input\n                                    id=\"input-title\"\n                                    type=\"text\"\n                                    value={state.title}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            title: e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-height\">Height</Label>\n                                <Input\n                                    id=\"input-height\"\n                                    type=\"number\"\n                                    value={state.height}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            height: +e.target.value,\n                                        }))\n                                    }\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"input-correlation\">\n                                    Correlation\n                                </Label>\n                                <Input\n                                    id=\"input-correlation\"\n                                    type=\"select\"\n                                    value={state.fn}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            fn: e.target\n                                                .value as unknown as Correlation,\n                                        }))\n                                    }\n                                >\n                                    <option value=\"pearson\">Pearson</option>\n                                    <option value=\"spearman\">Spearman</option>\n                                </Input>\n                            </FormGroup>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-use-endpoints\"\n                                    checked={state.useEndpoints}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            useEndpoints: e.target.checked,\n                                        }))\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-use-endpoints\"\n                                >\n                                    Compute correlation on Endpoints?\n                                </label>\n                            </div>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-use-perturbation\"\n                                    checked={state.usePerturbation}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            usePerturbation: e.target.checked,\n                                        }))\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-use-perturbation\"\n                                >\n                                    Compute correlation using Perturbation?\n                                </label>\n                            </div>\n                            <div className=\"custom-control custom-checkbox mb-3\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id=\"check-top-n\"\n                                    checked={state.top}\n                                    type=\"checkbox\"\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            top: e.target.checked,\n                                        }))\n                                    }\n                                />\n                                <label\n                                    className=\"custom-control-label\"\n                                    htmlFor=\"check-top-n\"\n                                >\n                                    Show only the top-N results?\n                                </label>\n                            </div>\n                            {state.top && (\n                                <>\n                                    <FormGroup>\n                                        <Label for=\"input-number\">\n                                            Number of top results\n                                        </Label>\n                                        <Input\n                                            id=\"input-number\"\n                                            type=\"number\"\n                                            value={state.n}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    n: +e.target.value,\n                                                }))\n                                            }\n                                        />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label for=\"input-direction\">\n                                            Direction\n                                        </Label>\n                                        <Input\n                                            id=\"input-direction\"\n                                            type=\"select\"\n                                            value={state.direction}\n                                            onChange={(e) =>\n                                                setState((prevState) => ({\n                                                    ...prevState,\n                                                    direction: e.target\n                                                        .value as unknown as Direction,\n                                                }))\n                                            }\n                                        >\n                                            <option value=\"positive\">\n                                                Top-N positive\n                                            </option>\n                                            <option value=\"negative\">\n                                                Top-N negative\n                                            </option>\n                                        </Input>\n                                    </FormGroup>\n                                </>\n                            )}\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs=\"12\" xl={canEditPages ? \"8\" : \"12\"}>\n                    <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                        <CardHeader className=\"bg-transparent\">\n                            <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                Add columns\n                            </h6>\n                        </CardHeader>\n                        <CardBody>\n                            <div className=\"d-flex flex-row justify-content-start align-items-center text-sm text-white-50 flex-wrap\">\n                                <div>Compare with simulations having</div>\n                                <Input\n                                    type=\"select\"\n                                    value={state.searchMode ?? \"all\"}\n                                    className=\"form-control-sm mx-2\"\n                                    style={{ width: \"auto\" }}\n                                    onChange={(e) =>\n                                        setState((prevState) => ({\n                                            ...prevState,\n                                            searchMode: e.target\n                                                .value as unknown as SearchMode,\n                                        }))\n                                    }\n                                >\n                                    <option value=\"all\">all</option>\n                                    <option value=\"any\">any</option>\n                                </Input>\n                                <div>tags:</div>\n                            </div>\n                            <Row>\n                                <Col\n                                    style={{ height: \"100px\" }}\n                                    className=\"overflow-auto\"\n                                >\n                                    {state.findByTags.map((tag) => (\n                                        <Badge\n                                            key={tag}\n                                            className=\"badge-default mx-1 text-light\"\n                                            href=\"#\"\n                                            onClick={handleDeleteTag(tag)}\n                                            title=\"Click to delete\"\n                                        >\n                                            {tag}\n                                        </Badge>\n                                    ))}\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-2\">\n                                <Col>\n                                    <InputGroup>\n                                        <AsyncTypeahead<string>\n                                            filterBy={() => true}\n                                            id=\"tags-add-tag-input\"\n                                            isLoading={isLoadingTags}\n                                            options={tagInputOptions}\n                                            onSearch={handleSearchTag}\n                                            onChange={(selected: string[]) =>\n                                                setTagInputValue(selected)\n                                            }\n                                            onKeyDown={(e) => {\n                                                const re =\n                                                    e as unknown as React.KeyboardEvent<HTMLInputElement>;\n                                                if (\n                                                    re.code === \"Enter\" ||\n                                                    re.code === \"NumpadEnter\"\n                                                ) {\n                                                    doAddTag();\n                                                }\n                                            }}\n                                            selected={tagInputValue}\n                                            minLength={3}\n                                            className=\"text-dark\"\n                                            placeholder=\"Add new tag (category: tag)\"\n                                            ref={typeAheadRefTag}\n                                        />\n                                        <InputGroupAddon addonType=\"append\">\n                                            <InputGroupText>\n                                                <a\n                                                    className=\"text-primary\"\n                                                    href=\"#\"\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        doAddTag();\n                                                    }}\n                                                >\n                                                    <i className=\"fas fa-plus\" />\n                                                </a>\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                    </InputGroup>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Col>\n                {canEditPages && (\n                    <Col xs=\"12\" xl=\"4\">\n                        <Card className=\"bg-gradient-dark shadow flex-grow-1\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                )}\n            </Row>\n        </>\n    );\n};\n\nexport default CorrelationGraphEditor;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport { Alert } from \"reactstrap\";\nimport Plot from \"react-plotly.js\";\nimport { useDispatcher } from \"../../../Contexts/DispatcherProvider\";\n\nexport interface SelectedSimulation {\n    sender: string;\n    compareWith: number;\n    fn?: \"pearson\" | \"spearman\";\n    useEndpoints: boolean;\n    usePerturbation: boolean;\n}\n\ninterface Props {\n    id?: string;\n    simulation: number;\n    fn?: \"pearson\" | \"spearman\";\n    top?: boolean;\n    n?: number;\n    direction?: \"positive\" | \"negative\";\n    useEndpoints?: boolean;\n    usePerturbation?: boolean;\n    findByTags: string[];\n    searchMode?: \"all\" | \"any\";\n    title?: string;\n    height?: number;\n}\n\ntype CustomData = [number, \"pearson\" | \"spearman\", number, number];\n\ninterface Data {\n    x: string[];\n    y: number[];\n    customdata: CustomData[];\n}\n\ninterface State {\n    data?: Data;\n    error?: boolean;\n    message?: string;\n}\n\nconst CorrelationGraph: React.FC<Props> = ({\n    id,\n    simulation,\n    title,\n    height = 600,\n    fn = \"pearson\",\n    top = false,\n    n = 10,\n    direction = \"negative\",\n    useEndpoints = true,\n    usePerturbation = false,\n    findByTags,\n    searchMode = \"all\",\n}: Props) => {\n    const [state, setState] = useState<State>({});\n    const dispatcher = useDispatcher();\n\n    const { data, error, message } = state;\n\n    useEffect(() => {\n        setState({});\n        if (findByTags && findByTags.length > 0) {\n            axios\n                .post<Data>(\n                    route(\"simulations.plugins.correlation\", simulation),\n                    {\n                        fn,\n                        top,\n                        n,\n                        direction,\n                        useEndpoints,\n                        usePerturbation,\n                        findByTags,\n                        searchMode,\n                    }\n                )\n                .then(({ data }) => {\n                    setState({ data });\n                })\n                .catch((e) => {\n                    setState({\n                        error: true,\n                        message: e.response.data.message ?? e.message,\n                    });\n                });\n        }\n    }, [\n        simulation,\n        fn,\n        top,\n        n,\n        direction,\n        useEndpoints,\n        usePerturbation,\n        findByTags,\n        searchMode,\n    ]);\n\n    if (!findByTags || findByTags.length === 0) {\n        return (\n            <Alert color=\"primary\">\n                <i className=\"fas fa-exclamation-circle mx-2\" />\n                You cannot view any graph until you select at lest two\n                simulations through their tags.\n            </Alert>\n        );\n    }\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    return (\n        <>\n            {!!data && (\n                <>\n                    <div className=\"d-flex flex-grow-1\">\n                        <Plot\n                            data={[\n                                {\n                                    ...data,\n                                    type: \"bar\",\n                                    marker: {\n                                        color: data.y.map((y) => (y + 1) / 2),\n                                        cmin: -1,\n                                        cmax: 1,\n                                        colorscale: [\n                                            [0, \"rgb(5,10,172)\"],\n                                            [0.35, \"rgb(106,137,247)\"],\n                                            [0.5, \"rgb(255,255,255)\"],\n                                            [0.6, \"rgb(220,170,132)\"],\n                                            [0.7, \"rgb(230,145,90)\"],\n                                            [1, \"rgb(178,10,28)\"],\n                                        ],\n                                        showscale: true,\n                                    },\n                                },\n                            ]}\n                            layout={{\n                                bargap: 0,\n                                yaxis: {\n                                    title:\n                                        fn === \"pearson\"\n                                            ? \"Pearson Correlation\"\n                                            : \"Spearman Correlation\",\n                                    range: [-1, 1],\n                                },\n                                font: { size: 12 },\n                                autosize: true,\n                                showlegend: false,\n                                title,\n                            }}\n                            config={{\n                                responsive: true,\n                            }}\n                            style={{\n                                width: \"100%\",\n                                height: `${height}px`,\n                            }}\n                            useResizeHandler\n                            onClick={(event) => {\n                                if (id && event.points.length > 0) {\n                                    const point = event.points[0];\n                                    const data =\n                                        point.customdata as unknown as CustomData;\n                                    dispatcher.dispatch<SelectedSimulation>(\n                                        \"onCorrelationGraphBarClick\",\n                                        {\n                                            sender: id,\n                                            compareWith: data[0],\n                                            fn: data[1],\n                                            useEndpoints: !!data[2],\n                                            usePerturbation: !!data[3],\n                                        }\n                                    );\n                                }\n                            }}\n                        />\n                    </div>\n                </>\n            )}\n            {!data && (\n                <Alert color=\"primary\">\n                    <i className=\"fas fa-circle-notch fa-spin mx-2\" />\n                    Building image. Please wait...\n                </Alert>\n            )}\n        </>\n    );\n};\n\nexport default CorrelationGraph;\n"],"sourceRoot":""}