{"version":3,"sources":["webpack:///./resources/js/Modules/Simulations/Components/PathwayImageEditor.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/PathwayImage.tsx"],"names":["simulation","pathway","canEditPages","pathwaysToNames","useState","pluginCode","setPluginCode","plugin","legend","position","state","setState","useEffect","JSON","stringify","undefined","xs","xl","className","for","id","type","value","onChange","e","prevState","target","CopyToClipboard","text","delay","trigger","style","maxHeight","overflowX","shown","setShown","data","error","message","then","response","toggleModal","includes","figure","fig_left","fig_right","href","onClick","preventDefault","src","alt","width","isOpen","toggle","maxWidth","color"],"mappings":"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","file":"js/373.js?id=3044fb9d5b69b6baf0f6","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport PathwayImage from \"../WikiPlugins/PathwayImage\";\n\ninterface Props {\n    simulation: number;\n    pathway?: string;\n    canEditPages: boolean;\n    pathwaysToNames: Record<string, string>;\n}\n\ntype Position = \"left\" | \"center\" | \"right\";\n\ninterface State {\n    plugin: \"@Simulations:PathwayImage\";\n    simulation: number;\n    pathway?: string;\n    legend: string;\n    position: Position;\n}\n\nconst PathwaysTableEditor: React.FC<Props> = ({\n    simulation,\n    pathway,\n    canEditPages,\n    pathwaysToNames,\n}: Props) => {\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:PathwayImage\",\n        simulation,\n        pathway,\n        legend: pathway ? pathwaysToNames[pathway] : \"\",\n        position: \"center\",\n    });\n\n    useEffect(() => {\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(state, undefined, 2)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl={canEditPages ? 8 : 12}>\n                    <PathwayImage {...state} />\n                </Col>\n                {canEditPages && (\n                    <Col xs=\"12\" xl=\"4\">\n                        <Card className=\"bg-gradient-dark shadow mb-2\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                    Edit Plugin\n                                </h6>\n                            </CardHeader>\n                            <CardBody className=\"text-white-50\">\n                                <FormGroup>\n                                    <Label for=\"input-legend\">Legend</Label>\n                                    <Input\n                                        id=\"input-legend\"\n                                        type=\"text\"\n                                        value={state.legend}\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                legend: e.target.value,\n                                            }))\n                                        }\n                                    />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label for=\"input-position\">Position</Label>\n                                    <Input\n                                        id=\"input-position\"\n                                        type=\"select\"\n                                        value={state.position}\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                position: e.target\n                                                    .value as Position,\n                                            }))\n                                        }\n                                    >\n                                        <option value=\"left\">Left</option>\n                                        <option value=\"center\">Center</option>\n                                        <option value=\"right\">Right</option>\n                                    </Input>\n                                </FormGroup>\n                            </CardBody>\n                        </Card>\n                        <Card className=\"bg-gradient-dark shadow\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                )}\n            </Row>\n        </>\n    );\n};\n\nexport default PathwaysTableEditor;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport { Alert, Button, Modal } from \"reactstrap\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    simulation: number;\n    pathway?: string;\n    legend?: string;\n    position?: \"left\" | \"center\" | \"right\";\n}\n\ninterface State {\n    data?: string;\n    error?: boolean;\n    message?: string;\n}\n\nconst PathwayImage: React.FC<Props> = ({\n    simulation,\n    pathway,\n    position = \"center\",\n    legend,\n}: Props) => {\n    const [state, setState] = useState<State>({});\n    const [shown, setShown] = useState(false);\n\n    const { data, error, message } = state;\n\n    useEffect(() => {\n        if (pathway) {\n            axios\n                .post<{ data: string }>(\n                    route(\"simulations.plugins.pathwayImage\", simulation),\n                    { pathway }\n                )\n                .then(({ data }) => {\n                    setState(data);\n                })\n                .catch((e) => {\n                    setState({\n                        error: true,\n                        message: e.response.data.message ?? e.message,\n                    });\n                });\n        }\n    }, [simulation, pathway]);\n\n    const toggleModal = () => setShown((prevState) => !prevState);\n\n    if (!pathway) {\n        return (\n            <Alert color=\"warning\">Select a pathway to view its image.</Alert>\n        );\n    }\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    return (\n        <>\n            {!!data && (\n                <>\n                    {[\"left\", \"right\"].includes(position) && (\n                        <div\n                            className={classNames({\n                                figure: true,\n                                fig_left: position === \"left\",\n                                fig_right: position === \"right\",\n                            })}\n                        >\n                            <div className=\"fig_container\">\n                                <a\n                                    href=\"#\"\n                                    className=\"fig\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        setShown(true);\n                                    }}\n                                >\n                                    <img src={data} alt={pathway} />\n                                </a>\n                                <div className=\"fig_caption\">{legend}</div>\n                            </div>\n                        </div>\n                    )}\n                    {position === \"center\" && (\n                        <div className=\"d-flex justify-content-center\">\n                            <div className=\"figure\" style={{ width: \"50%\" }}>\n                                <div className=\"fig_container\">\n                                    <a\n                                        href=\"#\"\n                                        className=\"fig\"\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            setShown(true);\n                                        }}\n                                    >\n                                        <img\n                                            src={data}\n                                            alt={pathway}\n                                            className=\"centered\"\n                                        />\n                                    </a>\n                                    <div className=\"fig_caption\">{legend}</div>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    <Modal\n                        className=\"modal-dialog-centered\"\n                        isOpen={shown}\n                        toggle={() => toggleModal()}\n                        style={{\n                            maxWidth: \"100vw\",\n                        }}\n                    >\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n                                {legend}\n                            </h5>\n                            <button\n                                aria-label=\"Close\"\n                                className=\"close\"\n                                data-dismiss=\"modal\"\n                                type=\"button\"\n                                onClick={() => toggleModal()}\n                            >\n                                <span aria-hidden={true}>×</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body\">\n                            <img\n                                src={data}\n                                alt={pathway}\n                                style={{ width: \"100%\" }}\n                            />\n                        </div>\n                        <div className=\"modal-footer\">\n                            <Button\n                                color=\"primary\"\n                                data-dismiss=\"modal\"\n                                type=\"button\"\n                                onClick={() => toggleModal()}\n                            >\n                                Close\n                            </Button>\n                        </div>\n                    </Modal>\n                </>\n            )}\n            {!data && (\n                <Alert color=\"primary\">\n                    <i className=\"fas fa-circle-notch fa-spin mx-2\" />\n                    Building image. Please wait...\n                </Alert>\n            )}\n        </>\n    );\n};\n\nexport default PathwayImage;\n"],"sourceRoot":""}