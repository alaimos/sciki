{"version":3,"sources":["webpack:///./resources/js/Modules/Simulations/Components/NodesTable.tsx"],"names":["NodeType","organism","selectedNodes","onNodeClick","className","useState","data","undefined","sizePerPage","page","totalSize","state","setState","useEffect","then","value","prevState","e","console","error","pagination","useMemo","alwaysShowAllBtns","showTotal","withFirstAndLast","sizePerPageRenderer","onSizePerPageChange","id","name","onChange","target","keyField","columns","dataField","text","sort","filter","isDummyField","headerStyle","width","formatter","_","row","selected","has","get","OVER_EXPRESSED","onClick","preventDefault","size","color","outline","placement","UNDER_EXPRESSED","NON_EXPRESSED","KNOCKOUT","remote","bootstrap4","bordered","onTableChange","newState","sortField","sortOrder","filters","overlay","spinner"],"mappings":"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","file":"js/890.js?id=5c057fc258664915d6b7","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { has, get } from \"lodash\";\nimport BootstrapTable, {\n    SizePerPageRendererOptions,\n} from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport filterFactory, { textFilter } from \"react-bootstrap-table2-filter\";\nimport axios from \"axios\";\n// @ts-ignore\nimport overlayFactory from \"react-bootstrap-table2-overlay\";\nimport route from \"ziggy-js\";\nimport { Button, UncontrolledTooltip } from \"reactstrap\";\n\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css\";\n\nexport enum NodeType {\n    KNOCKOUT = -1,\n    NON_EXPRESSED = 0,\n    UNDER_EXPRESSED = 1,\n    OVER_EXPRESSED = 2,\n}\n\ninterface Props {\n    organism?: number;\n    selectedNodes: Record<number, NodeType>;\n    onNodeClick: (node: number, type: NodeType) => void;\n}\n\ninterface Node {\n    id: number;\n    accession: string;\n    name: string;\n}\n\ninterface State {\n    data?: Node[];\n    sizePerPage: number;\n    page: number;\n    totalSize: number;\n}\n\nconst NodesTable: React.FC<Props> = ({\n    organism,\n    selectedNodes,\n    onNodeClick,\n}: Props) => {\n    if (!organism)\n        return (\n            <div className=\"py-4\">Please select an organism to continue</div>\n        );\n\n    const [state, setState] = useState<State>({\n        data: undefined,\n        sizePerPage: 10,\n        page: 1,\n        totalSize: 0,\n    });\n\n    const { data, sizePerPage, page, totalSize } = state;\n\n    useEffect(() => {\n        setState({\n            data: undefined,\n            sizePerPage: 10,\n            page: 1,\n            totalSize: 0,\n        });\n    }, [organism]);\n\n    useEffect(() => {\n        if (data === undefined) {\n            axios\n                .post<State>(route(\"simulations.nodes.table\", organism), {})\n                .then((value) => {\n                    setState((prevState) => ({\n                        ...prevState,\n                        ...value.data,\n                    }));\n                })\n                .catch((e) => {\n                    console.error(e);\n                });\n        }\n    }, [organism, data]);\n\n    const pagination = useMemo(\n        () =>\n            paginationFactory({\n                page,\n                totalSize,\n                sizePerPage,\n                alwaysShowAllBtns: true,\n                showTotal: true,\n                withFirstAndLast: false,\n                sizePerPageRenderer: ({\n                    onSizePerPageChange,\n                }: SizePerPageRendererOptions) => (\n                    <div\n                        className=\"dataTables_length\"\n                        id=\"datatable-basic_length\"\n                    >\n                        <label>\n                            Show{\" \"}\n                            {\n                                <select\n                                    name=\"datatable-basic_length\"\n                                    aria-controls=\"datatable-basic\"\n                                    className=\"form-control form-control-sm\"\n                                    onChange={(e) =>\n                                        onSizePerPageChange(+e.target.value, 1)\n                                    }\n                                >\n                                    <option value=\"10\">10</option>\n                                    <option value=\"25\">25</option>\n                                    <option value=\"50\">50</option>\n                                    <option value=\"100\">100</option>\n                                </select>\n                            }{\" \"}\n                            entries.\n                        </label>\n                    </div>\n                ),\n            }),\n        [page, totalSize, sizePerPage]\n    );\n\n    return (\n        <div className=\"py-4\">\n            <BootstrapTable\n                keyField=\"id\"\n                data={data ?? []}\n                columns={[\n                    {\n                        dataField: \"accession\",\n                        text: \"Accession\",\n                        sort: true,\n                        filter: textFilter(),\n                    },\n                    {\n                        dataField: \"name\",\n                        text: \"Name\",\n                        sort: true,\n                        filter: textFilter(),\n                    },\n                    {\n                        dataField: \"overexpressed\",\n                        isDummyField: true,\n                        text: \"\",\n                        headerStyle: {\n                            width: \"60px\",\n                        },\n                        formatter: (_, row) => {\n                            const selected =\n                                has(selectedNodes, row.id) &&\n                                get(selectedNodes, row.id) ===\n                                    NodeType.OVER_EXPRESSED;\n                            return (\n                                <>\n                                    <Button\n                                        id={`overexpressed-button-${row.id}`}\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            onNodeClick(\n                                                row.id,\n                                                NodeType.OVER_EXPRESSED\n                                            );\n                                        }}\n                                        size=\"sm\"\n                                        color=\"danger\"\n                                        outline={!selected}\n                                    >\n                                        <i className=\"fas fa-level-up-alt fa-fw\" />\n                                    </Button>\n                                    <UncontrolledTooltip\n                                        placement=\"auto\"\n                                        target={`overexpressed-button-${row.id}`}\n                                    >\n                                        Set as overexpressed\n                                    </UncontrolledTooltip>\n                                </>\n                            );\n                        },\n                    },\n                    {\n                        dataField: \"underexpressed\",\n                        isDummyField: true,\n                        text: \"\",\n                        headerStyle: {\n                            width: \"60px\",\n                        },\n                        formatter: (_, row) => {\n                            const selected =\n                                has(selectedNodes, row.id) &&\n                                get(selectedNodes, row.id) ===\n                                    NodeType.UNDER_EXPRESSED;\n                            return (\n                                <>\n                                    <Button\n                                        id={`underexpressed-button-${row.id}`}\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            onNodeClick(\n                                                row.id,\n                                                NodeType.UNDER_EXPRESSED\n                                            );\n                                        }}\n                                        size=\"sm\"\n                                        color=\"primary\"\n                                        outline={!selected}\n                                    >\n                                        <i className=\"fas fa-level-down-alt fa-fw\" />\n                                    </Button>\n                                    <UncontrolledTooltip\n                                        placement=\"auto\"\n                                        target={`underexpressed-button-${row.id}`}\n                                    >\n                                        Set as underexpressed\n                                    </UncontrolledTooltip>\n                                </>\n                            );\n                        },\n                    },\n                    {\n                        dataField: \"nonexpressed\",\n                        isDummyField: true,\n                        text: \"\",\n                        headerStyle: {\n                            width: \"60px\",\n                        },\n                        formatter: (_, row) => {\n                            const selected =\n                                has(selectedNodes, row.id) &&\n                                get(selectedNodes, row.id) ===\n                                    NodeType.NON_EXPRESSED;\n                            return (\n                                <>\n                                    <Button\n                                        id={`nonexpressed-button-${row.id}`}\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            onNodeClick(\n                                                row.id,\n                                                NodeType.NON_EXPRESSED\n                                            );\n                                        }}\n                                        size=\"sm\"\n                                        color=\"warning\"\n                                        outline={!selected}\n                                    >\n                                        <i className=\"fas fa-ban fa-fw\" />\n                                    </Button>\n                                    <UncontrolledTooltip\n                                        placement=\"auto\"\n                                        target={`nonexpressed-button-${row.id}`}\n                                    >\n                                        Set as non-expressed\n                                    </UncontrolledTooltip>\n                                </>\n                            );\n                        },\n                    },\n                    {\n                        dataField: \"knockedout\",\n                        isDummyField: true,\n                        text: \"\",\n                        headerStyle: {\n                            width: \"60px\",\n                        },\n                        formatter: (_, row) => {\n                            const selected =\n                                has(selectedNodes, row.id) &&\n                                get(selectedNodes, row.id) ===\n                                    NodeType.KNOCKOUT;\n                            return (\n                                <>\n                                    <Button\n                                        id={`knockedout-button-${row.id}`}\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            onNodeClick(\n                                                row.id,\n                                                NodeType.KNOCKOUT\n                                            );\n                                        }}\n                                        size=\"sm\"\n                                        color=\"default\"\n                                        outline={!selected}\n                                    >\n                                        <i className=\"fas fa-times fa-fw\" />\n                                    </Button>\n                                    <UncontrolledTooltip\n                                        placement=\"auto\"\n                                        target={`knockedout-button-${row.id}`}\n                                    >\n                                        Set as knocked-out\n                                    </UncontrolledTooltip>\n                                </>\n                            );\n                        },\n                    },\n                ]}\n                remote\n                bootstrap4\n                pagination={pagination}\n                filter={filterFactory()}\n                bordered={false}\n                onTableChange={(_, newState) => {\n                    axios\n                        .post<State>(\n                            route(\"simulations.nodes.table\", organism),\n                            {\n                                page: newState.page,\n                                sizePerPage: newState.sizePerPage,\n                                sortField: newState.sortField,\n                                sortOrder: newState.sortOrder,\n                                filters: newState.filters,\n                            }\n                        )\n                        .then((value) => {\n                            setState((prevState) => ({\n                                ...prevState,\n                                ...value.data,\n                            }));\n                        })\n                        .catch((e) => {\n                            console.error(e);\n                        });\n                }}\n                overlay={overlayFactory({ spinner: true })}\n            />\n        </div>\n    );\n};\n\nexport default NodesTable;\n"],"sourceRoot":""}