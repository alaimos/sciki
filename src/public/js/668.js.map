{"version":3,"sources":["webpack:///./resources/js/Modules/Simulations/Components/NodesTableEditor.tsx","webpack:///./resources/js/Modules/Simulations/WikiPlugins/NodesTable.tsx"],"names":["simulation","pathway","canEditPages","onSelect","useState","pluginCode","setPluginCode","useNodesSelection","setUseNodesSelection","nodesSelection","setNodesSelection","plugin","nodes","sortable","filterable","defaultSorting","dataField","order","state","setState","internalOnSelect","node","prevState","includes","filter","v","undefined","useEffect","realState","length","JSON","stringify","xs","xl","enableId","className","id","checked","disabled","type","onChange","e","target","htmlFor","for","value","CopyToClipboard","text","delay","trigger","style","maxHeight","overflowX","SearchBar","data","error","message","filters","then","Object","values","columns","sort","classes","formatter","_","row","activityScore","toFixed","averagePerturbation","pValue","FDR","unshift","selectRow","mode","clickToSelect","hideSelectAll","pagination","useMemo","alwaysShowAllBtns","showTotal","withFirstAndLast","sizePerPageRenderer","onSizePerPageChange","name","keyField","search","props","placeholder","searchProps","baseProps","bootstrap4","bordered","defaultSorted","color"],"mappings":"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","file":"js/668.js?id=fd8c9a75813dcc27c306","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    UncontrolledTooltip,\n} from \"reactstrap\";\nimport { SortOrder } from \"react-bootstrap-table-next\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport NodesTable, { Node } from \"../WikiPlugins/NodesTable\";\n\ninterface Props {\n    simulation: number;\n    pathway?: string;\n    canEditPages: boolean;\n    onSelect?: (node: string, pathway: string) => void;\n}\n\ninterface State {\n    plugin: \"@Simulations:NodesTable\";\n    simulation: number;\n    pathway?: string;\n    nodes: string[];\n    sortable: boolean;\n    filterable: boolean;\n    defaultSorting: { dataField: keyof Node; order: SortOrder };\n}\n\nconst NodesTableEditor: React.FC<Props> = ({\n    simulation,\n    pathway,\n    canEditPages,\n    onSelect,\n}: Props) => {\n    const [pluginCode, setPluginCode] = useState(\"\");\n    const [useNodesSelection, setUseNodesSelection] = useState(false);\n    const [nodesSelection, setNodesSelection] = useState<string[]>([]);\n    const [state, setState] = useState<State>({\n        plugin: \"@Simulations:NodesTable\",\n        simulation,\n        pathway,\n        nodes: [],\n        sortable: true,\n        filterable: true,\n        defaultSorting: {\n            dataField: \"FDR\",\n            order: \"asc\",\n        },\n    });\n\n    const internalOnSelect = canEditPages\n        ? (node: string) => {\n              setNodesSelection((prevState) => {\n                  if (prevState.includes(node)) {\n                      return prevState.filter((v) => v !== node);\n                  } else {\n                      return [...prevState, node];\n                  }\n              });\n              if (onSelect && pathway) onSelect(node, pathway);\n          }\n        : undefined;\n\n    useEffect(() => {\n        const realState =\n            useNodesSelection && nodesSelection.length > 0\n                ? {\n                      ...state,\n                      nodes: nodesSelection,\n                  }\n                : state;\n        setPluginCode(`\\`\\`\\`SciKi\n${JSON.stringify(realState, undefined, 2)}\n\\`\\`\\``);\n    }, [setPluginCode, simulation, state, useNodesSelection, nodesSelection]);\n\n    return (\n        <>\n            <Row>\n                <Col xs=\"12\" xl={canEditPages ? 8 : 12}>\n                    <NodesTable\n                        {...state}\n                        onSelect={internalOnSelect}\n                        enableId\n                    />\n                </Col>\n                {canEditPages && (\n                    <Col xs=\"12\" xl=\"4\">\n                        <Card className=\"bg-gradient-dark shadow mb-2\">\n                            <CardHeader className=\"bg-transparent\">\n                                <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                    Edit Plugin\n                                </h6>\n                            </CardHeader>\n                            <CardBody className=\"text-white-50\">\n                                <div className=\"custom-control custom-checkbox mb-3\">\n                                    <input\n                                        className=\"custom-control-input\"\n                                        id=\"check-nodes\"\n                                        checked={useNodesSelection}\n                                        disabled={nodesSelection.length === 0}\n                                        type=\"checkbox\"\n                                        onChange={(e) =>\n                                            setUseNodesSelection(\n                                                e.target.checked\n                                            )\n                                        }\n                                    />\n                                    <label\n                                        className=\"custom-control-label\"\n                                        htmlFor=\"check-nodes\"\n                                    >\n                                        Show only selected nodes? (The editor\n                                        will not reflect this change)\n                                    </label>\n                                </div>\n                                <div className=\"custom-control custom-checkbox mb-3\">\n                                    <input\n                                        className=\"custom-control-input\"\n                                        id=\"check-filterable\"\n                                        checked={state.filterable}\n                                        type=\"checkbox\"\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                filterable: e.target.checked,\n                                            }))\n                                        }\n                                    />\n                                    <label\n                                        className=\"custom-control-label\"\n                                        htmlFor=\"check-filterable\"\n                                    >\n                                        Enable search?\n                                    </label>\n                                </div>\n                                <div className=\"custom-control custom-checkbox mb-3\">\n                                    <input\n                                        className=\"custom-control-input\"\n                                        id=\"check-sortable\"\n                                        checked={state.sortable}\n                                        type=\"checkbox\"\n                                        onChange={(e) =>\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                sortable: e.target.checked,\n                                            }))\n                                        }\n                                    />\n                                    <label\n                                        className=\"custom-control-label\"\n                                        htmlFor=\"check-sortable\"\n                                    >\n                                        Enable sorting?\n                                    </label>\n                                </div>\n                                {state.sortable && (\n                                    <>\n                                        <FormGroup>\n                                            <Label for=\"input-sortBy\">\n                                                Sorting\n                                            </Label>\n                                            <Row>\n                                                <Col xs={6}>\n                                                    <Input\n                                                        id=\"input-sortBy\"\n                                                        type=\"select\"\n                                                        value={\n                                                            state.defaultSorting\n                                                                .dataField\n                                                        }\n                                                        onChange={(e) =>\n                                                            setState(\n                                                                (\n                                                                    prevState\n                                                                ) => ({\n                                                                    ...prevState,\n                                                                    defaultSorting:\n                                                                        {\n                                                                            ...prevState.defaultSorting,\n                                                                            dataField:\n                                                                                e\n                                                                                    .target\n                                                                                    .value as keyof Node,\n                                                                        },\n                                                                })\n                                                            )\n                                                        }\n                                                    >\n                                                        <option value=\"nodeId\">\n                                                            Id\n                                                        </option>\n                                                        <option value=\"nodeName\">\n                                                            Name\n                                                        </option>\n                                                        <option value=\"activityScore\">\n                                                            Activity Score\n                                                        </option>\n                                                        <option value=\"averagePerturbation\">\n                                                            Perturbation\n                                                        </option>\n                                                        <option value=\"pValue\">\n                                                            p-value\n                                                        </option>\n                                                        <option value=\"FDR\">\n                                                            FDR\n                                                        </option>\n                                                    </Input>\n                                                </Col>\n                                                <Col xs={6}>\n                                                    <Input\n                                                        id=\"input-sortDirection\"\n                                                        type=\"select\"\n                                                        value={\n                                                            state.defaultSorting\n                                                                .order\n                                                        }\n                                                        onChange={(e) =>\n                                                            setState(\n                                                                (\n                                                                    prevState\n                                                                ) => ({\n                                                                    ...prevState,\n                                                                    defaultSorting:\n                                                                        {\n                                                                            ...prevState.defaultSorting,\n                                                                            order: e\n                                                                                .target\n                                                                                .value as SortOrder,\n                                                                        },\n                                                                })\n                                                            )\n                                                        }\n                                                    >\n                                                        <option value=\"asc\">\n                                                            ASC\n                                                        </option>\n                                                        <option value=\"desc\">\n                                                            DESC\n                                                        </option>\n                                                    </Input>\n                                                </Col>\n                                            </Row>\n                                        </FormGroup>\n                                    </>\n                                )}\n                            </CardBody>\n                        </Card>\n                        <Card className=\"bg-gradient-dark shadow\">\n                            <CardHeader className=\"bg-transparent\">\n                                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                        Get the code\n                                    </h6>\n                                    <CopyToClipboard text={pluginCode}>\n                                        <Button\n                                            className=\"btn btn-sm btn-link\"\n                                            id=\"get-code-tooltip\"\n                                            type=\"button\"\n                                        >\n                                            <i className=\"fas fa-clipboard\" />\n                                        </Button>\n                                    </CopyToClipboard>\n                                    <UncontrolledTooltip\n                                        delay={0}\n                                        trigger=\"hover focus\"\n                                        target=\"get-code-tooltip\"\n                                    >\n                                        Copy To Clipboard\n                                    </UncontrolledTooltip>\n                                </div>\n                            </CardHeader>\n                            <CardBody>\n                                <code className=\"text-wrap\">\n                                    <pre\n                                        className=\"text-white-50\"\n                                        style={{\n                                            maxHeight: \"150px\",\n                                            overflowX: \"auto\",\n                                        }}\n                                    >\n                                        {pluginCode}\n                                    </pre>\n                                </code>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                )}\n            </Row>\n        </>\n    );\n};\n\nexport default NodesTableEditor;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport BootstrapTable, {\n    ColumnDescription,\n    SelectRowProps,\n    SizePerPageRendererOptions,\n    SortOrder,\n} from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport filterFactory from \"react-bootstrap-table2-filter\";\nimport ToolkitProvider, {\n    Search,\n    ToolkitContextType,\n} from \"react-bootstrap-table2-toolkit\";\nimport axios from \"axios\";\nimport route from \"ziggy-js\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css\";\nimport { Alert } from \"reactstrap\";\n\ninterface Props {\n    simulation: number;\n    pathway?: string;\n    nodes?: string[];\n    sortable?: boolean;\n    filterable?: boolean;\n    enableId?: boolean;\n    defaultSorting?: { dataField: keyof Node; order: SortOrder };\n    onSelect?: (node: string) => void;\n}\n\nexport interface Node {\n    nodeId: string;\n    nodeName: string;\n    averagePerturbation: number;\n    activityScore: number;\n    pValue: number;\n    FDR: number;\n}\n\ninterface State {\n    data?: Node[];\n    error?: boolean;\n    message?: string;\n}\n\nconst { SearchBar } = Search;\n\nconst NodesTable: React.FC<Props> = ({\n    simulation,\n    pathway,\n    nodes,\n    sortable = true,\n    filterable = true,\n    enableId = false,\n    defaultSorting = {\n        dataField: \"FDR\",\n        order: \"asc\",\n    },\n    onSelect,\n}: Props) => {\n    const [state, setState] = useState<State>({\n        data: undefined,\n    });\n\n    const { data, error, message } = state;\n\n    useEffect(() => {\n        if (pathway) {\n            const filters = nodes ? { nodes } : {};\n            axios\n                .post<Record<string, Node>>(\n                    route(\"simulations.plugins.nodesTable\", simulation),\n                    { pathway, ...filters }\n                )\n                .then(({ data }) => {\n                    setState({\n                        data: Object.values(data),\n                    });\n                })\n                .catch((e) => {\n                    setState({\n                        error: true,\n                        message: e.message,\n                    });\n                });\n        }\n    }, [simulation, nodes, pathway]);\n\n    const columns: ColumnDescription[] = [\n        {\n            dataField: \"nodeName\",\n            text: \"Name\",\n            sort: sortable,\n            classes: \"text-truncate\",\n        },\n        {\n            dataField: \"activityScore\",\n            text: \"Activity Score\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) => row.activityScore.toFixed(4),\n        },\n        {\n            dataField: \"averagePerturbation\",\n            text: \"Perturbation\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) => row.averagePerturbation.toFixed(4),\n        },\n        {\n            dataField: \"pValue\",\n            text: \"p-value\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) =>\n                row.pValue < 0.0001 ? \"< 0.0001\" : row.pValue.toFixed(4),\n        },\n        {\n            dataField: \"FDR\",\n            text: \"FDR\",\n            sort: sortable,\n            classes: \"text-truncate\",\n            formatter: (_, row) =>\n                row.FDR < 0.0001 ? \"< 0.0001\" : row.FDR.toFixed(4),\n        },\n    ];\n    if (enableId) {\n        columns.unshift({\n            dataField: \"nodeId\",\n            text: \"Id\",\n            sort: sortable,\n        });\n    }\n    const selectRow: SelectRowProps<Node> | undefined = onSelect\n        ? {\n              mode: \"checkbox\",\n              clickToSelect: true,\n              hideSelectAll: true,\n              onSelect: (row) => onSelect(row.nodeId),\n          }\n        : undefined;\n\n    const pagination = useMemo(\n        () =>\n            paginationFactory({\n                alwaysShowAllBtns: true,\n                showTotal: true,\n                withFirstAndLast: false,\n                sizePerPageRenderer: ({\n                    onSizePerPageChange,\n                }: SizePerPageRendererOptions) => (\n                    <div\n                        className=\"dataTables_length\"\n                        id=\"datatable-basic_length\"\n                    >\n                        <label>\n                            Show{\" \"}\n                            {\n                                <select\n                                    name=\"datatable-basic_length\"\n                                    aria-controls=\"datatable-basic\"\n                                    className=\"form-control form-control-sm\"\n                                    onChange={(e) =>\n                                        onSizePerPageChange(+e.target.value, 1)\n                                    }\n                                >\n                                    <option value=\"10\">10</option>\n                                    <option value=\"25\">25</option>\n                                    <option value=\"50\">50</option>\n                                    <option value=\"100\">100</option>\n                                </select>\n                            }{\" \"}\n                            entries.\n                        </label>\n                    </div>\n                ),\n            }),\n        [simulation, pathway, nodes, sortable]\n    );\n\n    if (!pathway) {\n        return (\n            <Alert color=\"warning\">Select a pathway to view its nodes.</Alert>\n        );\n    }\n\n    if (error) {\n        return <p className=\"text-red\">{message}</p>;\n    }\n\n    return (\n        <ToolkitProvider\n            keyField=\"nodeId\"\n            data={data ?? []}\n            columns={columns}\n            search\n        >\n            {(props: ToolkitContextType) => (\n                <div className=\"py-4\">\n                    {filterable && (\n                        <div className=\"dataTables_filter px-4 pb-1\">\n                            <label>\n                                Search:\n                                <SearchBar\n                                    className=\"form-control-sm\"\n                                    placeholder=\"\"\n                                    {...props.searchProps}\n                                />\n                            </label>\n                        </div>\n                    )}\n                    <BootstrapTable\n                        {...props.baseProps}\n                        bootstrap4\n                        pagination={pagination}\n                        filter={filterFactory()}\n                        bordered={false}\n                        defaultSorted={[defaultSorting]}\n                        selectRow={selectRow}\n                    />\n                </div>\n            )}\n        </ToolkitProvider>\n    );\n};\n\nexport default NodesTable;\n"],"sourceRoot":""}